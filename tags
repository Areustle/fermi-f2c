!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALIADDR	src/machdefs.h	/^#define ALIADDR /;"	d
ALIDOUBLE	src/machdefs.h	/^#define ALIDOUBLE /;"	d
ALIINT	src/machdefs.h	/^#define ALIINT	/;"	d
ALILENG	src/machdefs.h	/^#define ALILENG	/;"	d
ALILONG	src/machdefs.h	/^#define ALILONG /;"	d
ALISHORT	src/machdefs.h	/^#define ALISHORT /;"	d
ALLEXPR	src/defines.h	/^#define ALLEXPR	/;"	d
ALLOC	src/defines.h	/^#define ALLOC(/;"	d
ALLOCN	src/init.c	/^#define ALLOCN(/;"	d	file:
ANSI_Libraries	src/sysdep.h	/^#define ANSI_Libraries$/;"	d
ANSI_Prototypes	src/sysdep.h	/^#define ANSI_Prototypes$/;"	d
ARGUMENT_MAX	src/names.h	/^#define ARGUMENT_MAX /;"	d
Addrblock	src/defs.h	/^struct Addrblock$/;"	s
Addrp	src/defs.h	/^typedef struct Addrblock *Addrp;$/;"	t	typeref:struct:Addrblock
Ado_string	src/formatdata.c	/^Ado_string(outfile, v, nloc)$/;"	f	file:
Alloc	src/misc.c	/^Alloc(n)$/;"	f
Ansi	src/main.c	/^int Ansi = YES;$/;"	v
Argdcl	src/defs.h	/^#define Argdcl(/;"	d
Argdcl	src/parse.h	/^#define Argdcl(/;"	d
Argtype	src/putpcc.c	/^Argtype(k, buf)$/;"	f
Argtypes	src/defs.h	/^	} Argtypes;$/;"	t	typeref:struct:__anon2
Atype	src/defs.h	/^	} Atype;$/;"	t	typeref:struct:__anon1
BAD_MEMNO	src/defines.h	/^#define BAD_MEMNO /;"	d
BIGGEST_CHAR	src/defines.h	/^#define BIGGEST_CHAR	/;"	d
BIGGEST_LONG	src/defines.h	/^#define BIGGEST_LONG	/;"	d
BIGGEST_SHORT	src/defines.h	/^#define BIGGEST_SHORT	/;"	d
BINARY_OP	src/output.h	/^#define BINARY_OP /;"	d
BLANK	src/lex.c	/^#define BLANK	/;"	d	file:
BLANKCOMMON	src/machdefs.h	/^#define BLANKCOMMON /;"	d
Bits_per_Byte	src/sysdep.h	/^#define Bits_per_Byte /;"	d
Blank	src/proc.c	/^static char Blank[] = BLANKCOMMON;$/;"	v	file:
Buf	src/xsum.c	/^static Uchar Buf[16*1024];$/;"	v	file:
Bug	src/init.c	/^static char Bug[] = "bug";$/;"	v	file:
CC	src/Makefile	/^CC = cc$/;"	m
CFLAGS	src/Makefile	/^CFLAGS = -O$/;"	m
CHNULL	src/defines.h	/^#define CHNULL /;"	d
CLBLOCK	src/defines.h	/^#define CLBLOCK /;"	d
CLENTRY	src/defines.h	/^#define CLENTRY /;"	d
CLMAIN	src/defines.h	/^#define CLMAIN /;"	d
CLNAMELIST	src/defines.h	/^#define CLNAMELIST /;"	d
CLPARAM	src/defines.h	/^#define CLPARAM /;"	d
CLPROC	src/defines.h	/^#define CLPROC /;"	d
CLUNKNOWN	src/defines.h	/^#define CLUNKNOWN /;"	d
CLVAR	src/defines.h	/^#define CLVAR /;"	d
CNULL	src/defines.h	/^#define CNULL /;"	d
COMMENT_BUFFER_SIZE	src/p1defs.h	/^#define COMMENT_BUFFER_SIZE /;"	d
COMMENT_BUF_STORE	src/lex.c	/^#define COMMENT_BUF_STORE /;"	d	file:
COMMUTE	src/expr.c	/^#define COMMUTE	/;"	d	file:
CONSTANT_STR_MAX	src/p1defs.h	/^#define CONSTANT_STR_MAX /;"	d
CONST_IDENT_MAX	src/names.h	/^#define CONST_IDENT_MAX /;"	d
CTLDO	src/defines.h	/^#define CTLDO /;"	d
CTLELSE	src/defines.h	/^#define CTLELSE /;"	d
CTLIF	src/defines.h	/^#define CTLIF /;"	d
CTLIFX	src/defines.h	/^#define CTLIFX /;"	d
C_f	src/f2c.h	/^typedef VOID C_f;	\/* complex function *\/$/;"	t
C_fp	src/f2c.h	/^typedef \/* Complex *\/ VOID (*C_fp)();$/;"	t
C_fp	src/f2c.h	/^typedef \/* Complex *\/ VOID (*C_fp)(...);$/;"	t
Castargs	src/main.c	/^int Castargs = 1;$/;"	v
Castargs1	src/main.c	/^static int Castargs1;$/;"	v	file:
Cextern	src/sysdep.c	/^#define Cextern /;"	d	file:
Chain	src/defs.h	/^struct Chain$/;"	s
Char	src/malloc.c	/^#define Char /;"	d	file:
Charp	src/defs.h	/^	    char *Charp;$/;"	m	union:Addrblock::__anon6
Const	src/defs.h	/^	    union Constant Const;	\/* Constant value *\/$/;"	m	union:Addrblock::__anon6	typeref:union:Addrblock::__anon6::Constant
Const	src/defs.h	/^	union Constant Const;$/;"	m	struct:Constblock	typeref:union:Constblock::Constant
Constant	src/defs.h	/^union Constant$/;"	u
Constblock	src/defs.h	/^struct Constblock$/;"	s
Constp	src/defs.h	/^typedef struct Constblock *Constp;$/;"	t	typeref:struct:Constblock
Ctlframe	src/defs.h	/^struct Ctlframe$/;"	s
DEF_C_LINE_LENGTH	src/format.h	/^#define DEF_C_LINE_LENGTH /;"	d
DOINCR	src/exec.c	/^#define DOINCR	/;"	d	file:
DOINIT	src/exec.c	/^#define DOINIT	/;"	d	file:
DOLIMIT	src/exec.c	/^#define DOLIMIT	/;"	d	file:
D_fp	src/f2c.h	/^typedef doublereal (*D_fp)(), (*E_fp)();$/;"	t
D_fp	src/f2c.h	/^typedef doublereal (*D_fp)(...), (*E_fp)(...);$/;"	t
Dimblock	src/defs.h	/^struct Dimblock$/;"	s
Dims	src/defs.h	/^struct Dims { expptr lb, ub; };$/;"	s
Dotlist	src/lex.c	/^struct Dotlist {$/;"	s	file:
ENULL	src/defines.h	/^#define ENULL /;"	d
EOF_CHAR	src/lex.c	/^#define EOF_CHAR /;"	d	file:
EOF_CHAR	src/lex.c	/^#undef EOF_CHAR$/;"	d	file:
EQUIV_INIT_NAME	src/names.h	/^#define EQUIV_INIT_NAME /;"	d
ERR	src/expr.c	/^#define ERR(/;"	d	file:
ESNULL	src/gram.c	/^#define ESNULL /;"	d	file:
EXNULL	src/proc.c	/^#define EXNULL /;"	d	file:
E_f	src/f2c.h	/^typedef doublereal E_f;	\/* real function with -R not specified *\/$/;"	t
E_fp	src/f2c.h	/^typedef doublereal (*D_fp)(), (*E_fp)();$/;"	t
E_fp	src/f2c.h	/^typedef doublereal (*D_fp)(...), (*E_fp)(...);$/;"	t
Entrypoint	src/defs.h	/^struct Entrypoint$/;"	s
Equivblock	src/defs.h	/^struct Equivblock$/;"	s
Eqvchain	src/defs.h	/^struct Eqvchain$/;"	s
Errorblock	src/defs.h	/^struct Errorblock$/;"	s
Exprblock	src/defs.h	/^struct Exprblock$/;"	s
Expression	src/defs.h	/^union Expression$/;"	u
Exprp	src/defs.h	/^typedef struct Exprblock *Exprp;$/;"	t	typeref:struct:Exprblock
Extern	src/f2c.h	/^#define Extern /;"	d
Extsym	src/defs.h	/^struct Extsym$/;"	s
Extsym	src/defs.h	/^typedef struct Extsym Extsym;$/;"	t	typeref:struct:Extsym
F	src/malloc.c	/^#define F /;"	d	file:
F	src/malloc.c	/^mem *F;$/;"	v
F2C_INCLUDE	src/f2c.h	/^#define F2C_INCLUDE$/;"	d
F2C_proc_par_types	src/f2c.h	/^#define F2C_proc_par_types /;"	d
F2C_version	src/version.c	/^char F2C_version[] = "20160102";$/;"	v
FALSE	src/output.c	/^#define FALSE /;"	d	file:
FALSE	src/parse_args.c	/^#define FALSE /;"	d	file:
FALSE_	src/f2c.h	/^#define FALSE_ /;"	d
FILEP	src/defines.h	/^typedef FILE *FILEP;$/;"	t
FIRSTTOKEN	src/lex.c	/^#define FIRSTTOKEN	/;"	d	file:
FORMATTED	src/io.c	/^#define FORMATTED /;"	d	file:
FSCANF_LL_BUG	src/format.c	/^#define FSCANF_LL_BUG$/;"	d	file:
Fatal	src/error.c	/^Fatal(t)$/;"	f
Field	src/defs.h	/^	char *Field;		\/* field name when dereferencing a struct *\/$/;"	m	struct:Addrblock
Fmtlist	src/lex.c	/^struct Fmtlist {$/;"	s	file:
GMEMBSIZE	src/mem.c	/^#define GMEMBSIZE	/;"	d	file:
H_f	src/f2c.h	/^typedef VOID H_f;	\/* character function *\/$/;"	t
H_fp	src/f2c.h	/^typedef \/* Character *\/ VOID (*H_fp)();$/;"	t
H_fp	src/f2c.h	/^typedef \/* Character *\/ VOID (*H_fp)(...);$/;"	t
Hashentry	src/defs.h	/^struct Hashentry$/;"	s
Headblock	src/defs.h	/^struct Headblock$/;"	s
ICON	src/defines.h	/^#define ICON(/;"	d
ICONEQ	src/expr.c	/^#define ICONEQ(/;"	d	file:
IDENT_LEN	src/defines.h	/^#define IDENT_LEN /;"	d
INDATA	src/defines.h	/^#define INDATA /;"	d
INDCL	src/defines.h	/^#define INDCL /;"	d
INEXEC	src/defines.h	/^#define INEXEC /;"	d
INIT_STRUCT	src/names.c	/^#define INIT_STRUCT /;"	d	file:
INSIDE	src/defines.h	/^#define INSIDE /;"	d
INT	src/defines.h	/^#define INT(/;"	d
INTRBGEN	src/defines.h	/^#define INTRBGEN /;"	d
INTRBOOL	src/defines.h	/^#define INTRBOOL /;"	d
INTRCNST	src/defines.h	/^#define INTRCNST /;"	d
INTRCONV	src/defines.h	/^#define INTRCONV /;"	d
INTREND	src/defines.h	/^#define INTREND /;"	d
INTRGEN	src/defines.h	/^#define INTRGEN /;"	d
INTRMAX	src/defines.h	/^#define INTRMAX /;"	d
INTRMIN	src/defines.h	/^#define INTRMIN /;"	d
INTRSPEC	src/defines.h	/^#define INTRSPEC /;"	d
IOALL	src/io.c	/^#define IOALL /;"	d	file:
IOBACKSPACE	src/defines.h	/^#define IOBACKSPACE /;"	d
IOCLOSE	src/defines.h	/^#define IOCLOSE /;"	d
IOENDFILE	src/defines.h	/^#define IOENDFILE /;"	d
IOINQUIRE	src/defines.h	/^#define IOINQUIRE /;"	d
IOOPEN	src/defines.h	/^#define IOOPEN /;"	d
IOREAD	src/defines.h	/^#define IOREAD /;"	d
IOREWIND	src/defines.h	/^#define IOREWIND /;"	d
IOSACCESS	src/io.c	/^#define IOSACCESS /;"	d	file:
IOSBAD	src/defines.h	/^#define IOSBAD /;"	d
IOSBLANK	src/io.c	/^#define IOSBLANK /;"	d	file:
IOSDIRECT	src/io.c	/^#define IOSDIRECT /;"	d	file:
IOSEND	src/io.c	/^#define IOSEND /;"	d	file:
IOSERR	src/io.c	/^#define IOSERR /;"	d	file:
IOSEXISTS	src/io.c	/^#define IOSEXISTS /;"	d	file:
IOSFILE	src/io.c	/^#define IOSFILE /;"	d	file:
IOSFMT	src/defines.h	/^#define IOSFMT /;"	d
IOSFORM	src/io.c	/^#define IOSFORM /;"	d	file:
IOSFORMATTED	src/io.c	/^#define IOSFORMATTED /;"	d	file:
IOSIOSTAT	src/io.c	/^#define IOSIOSTAT /;"	d	file:
IOSNAME	src/io.c	/^#define IOSNAME /;"	d	file:
IOSNAMED	src/io.c	/^#define IOSNAMED /;"	d	file:
IOSNEXTREC	src/io.c	/^#define IOSNEXTREC /;"	d	file:
IOSNML	src/io.c	/^#define IOSNML /;"	d	file:
IOSNUMBER	src/io.c	/^#define IOSNUMBER /;"	d	file:
IOSOPENED	src/io.c	/^#define IOSOPENED /;"	d	file:
IOSPOSITIONAL	src/defines.h	/^#define IOSPOSITIONAL /;"	d
IOSREC	src/io.c	/^#define IOSREC /;"	d	file:
IOSRECL	src/io.c	/^#define IOSRECL /;"	d	file:
IOSSEQUENTIAL	src/io.c	/^#define IOSSEQUENTIAL /;"	d	file:
IOSSTATUS	src/io.c	/^#define IOSSTATUS /;"	d	file:
IOSTDERR	src/defines.h	/^#define IOSTDERR /;"	d
IOSTDIN	src/defines.h	/^#define IOSTDIN /;"	d
IOSTDOUT	src/defines.h	/^#define IOSTDOUT /;"	d
IOSTP	src/io.c	/^#define IOSTP /;"	d	file:
IOSUNFORMATTED	src/io.c	/^#define IOSUNFORMATTED /;"	d	file:
IOSUNIT	src/defines.h	/^#define IOSUNIT /;"	d
IOWRITE	src/defines.h	/^#define IOWRITE /;"	d
IO_IDENT_MAX	src/names.h	/^#define IO_IDENT_MAX /;"	d
ISCHAR	src/defines.h	/^#define ISCHAR(/;"	d
ISCOMPLEX	src/defines.h	/^#define ISCOMPLEX(/;"	d
ISCONST	src/defines.h	/^#define ISCONST(/;"	d
ISERROR	src/defines.h	/^#define ISERROR(/;"	d
ISICON	src/defines.h	/^#define ISICON(/;"	d
ISINT	src/defines.h	/^#define ISINT(/;"	d
ISLOGICAL	src/defines.h	/^#define ISLOGICAL(/;"	d
ISNUMERIC	src/defines.h	/^#define ISNUMERIC(/;"	d
ISONE	src/defines.h	/^#define ISONE(/;"	d
ISPLUSOP	src/defines.h	/^#define ISPLUSOP(/;"	d
ISREAL	src/defines.h	/^#define ISREAL(/;"	d
ISSTAROP	src/defines.h	/^#define ISSTAROP(/;"	d
I_args	src/main.c	/^I_args(argc, a)$/;"	f	file:
I_fp	src/f2c.h	/^typedef integer (*I_fp)();$/;"	t
I_fp	src/f2c.h	/^typedef integer (*I_fp)(...);$/;"	t
Iargs	src/main.c	/^chainp Iargs;$/;"	v
Impldoblock	src/defs.h	/^struct Impldoblock$/;"	s
In_string	src/niceprintf.c	/^static int In_string = 0;$/;"	v	file:
Inclfile	src/lex.c	/^struct Inclfile$/;"	s	file:
Inline	src/intr.c	/^Inline(fno, type, args)$/;"	f
Int	src/malloc.c	/^#define Int /;"	d	file:
Intrbits	src/intr.c	/^struct Intrbits$/;"	s	file:
Intrblock	src/intr.c	/^LOCAL struct Intrblock$/;"	s	file:
Intrpacked	src/defs.h	/^struct Intrpacked	\/* bits for intrinsic function description *\/$/;"	s
Ioclist	src/io.c	/^LOCAL struct Ioclist$/;"	s	file:
J_fp	src/f2c.h	/^typedef shortint (*J_fp)();$/;"	t
J_fp	src/f2c.h	/^typedef shortint (*J_fp)(...);$/;"	t
KR_headers	src/sysdep.h	/^#undef KR_headers$/;"	d
K_fp	src/f2c.h	/^typedef shortlogical (*K_fp)();$/;"	t
K_fp	src/f2c.h	/^typedef shortlogical (*K_fp)(...);$/;"	t
Keylist	src/lex.c	/^struct Keylist {$/;"	s	file:
L	src/p1output.c	/^	long L[2];$/;"	m	union:dL	file:
LABELFMT	src/machdefs.h	/^#define LABELFMT /;"	d
LABEXEC	src/defines.h	/^#define LABEXEC /;"	d
LABFORMAT	src/defines.h	/^#define LABFORMAT /;"	d
LABOTHER	src/defines.h	/^#define LABOTHER /;"	d
LABUNKNOWN	src/defines.h	/^#define LABUNKNOWN /;"	d
LBNULL	src/gram.c	/^#define LBNULL /;"	d	file:
LISTDIRECTED	src/io.c	/^#define LISTDIRECTED /;"	d	file:
LIT_CHAR	src/put.c	/^#define LIT_CHAR /;"	d	file:
LIT_FLOAT	src/put.c	/^#define LIT_FLOAT /;"	d	file:
LIT_INT	src/put.c	/^#define LIT_INT /;"	d	file:
LIT_INTQ	src/put.c	/^#define LIT_INTQ /;"	d	file:
LOCAL	src/defines.h	/^#define LOCAL /;"	d
LONG_CAST	src/sysdep.h	/^#define LONG_CAST /;"	d
LONG_CAST	src/sysdep.h	/^#define LONG_CAST$/;"	d
LRget	src/expr.c	/^LRget(Lp, Rp, lp, rp) Llong *Lp, *Rp; expptr lp, rp;$/;"	f	file:
L_fp	src/f2c.h	/^typedef logical (*L_fp)();$/;"	t
L_fp	src/f2c.h	/^typedef logical (*L_fp)(...);$/;"	t
Labelblock	src/defs.h	/^struct Labelblock$/;"	s
Len	src/formatdata.c	/^Len(L, type)$/;"	f	file:
Letters	src/init.c	/^unsigned char hextoi_tab[Table_size], Letters[Table_size];$/;"	v
Listblock	src/defs.h	/^struct Listblock$/;"	s
Literal	src/defs.h	/^struct Literal$/;"	s
Llong	src/ftypes.h	/^typedef long long Llong;$/;"	t
M	src/defines.h	/^#define M(/;"	d
MALLOC	src/Makefile	/^MALLOC =$/;"	m
MAXCONTIN	src/defs.h	/^#define MAXCONTIN /;"	d
MAXCTL	src/defs.h	/^#define MAXCTL /;"	d
MAXDIM	src/defs.h	/^#define MAXDIM /;"	d
MAXEQUIV	src/defs.h	/^#define MAXEQUIV /;"	d
MAXEXT	src/defs.h	/^#define MAXEXT /;"	d
MAXHASH	src/defs.h	/^#define MAXHASH /;"	d
MAXINCLUDES	src/defs.h	/^#define MAXINCLUDES /;"	d
MAXLABLIST	src/defs.h	/^#define MAXLABLIST /;"	d
MAXLITERALS	src/defs.h	/^#define MAXLITERALS /;"	d
MAXNAMELEN	src/defines.h	/^#define MAXNAMELEN /;"	d
MAXREGVAR	src/machdefs.h	/^#define MAXREGVAR /;"	d
MAXSTNO	src/defs.h	/^#define MAXSTNO /;"	d
MAX_INDENT	src/niceprintf.c	/^#define MAX_INDENT /;"	d	file:
MAX_INIT_LINE	src/formatdata.c	/^#define MAX_INIT_LINE /;"	d	file:
MAX_INPUT_SIZE	src/parse_args.c	/^#define MAX_INPUT_SIZE /;"	d	file:
MAX_OUTPUT_SIZE	src/niceprintf.h	/^#define MAX_OUTPUT_SIZE /;"	d
MAX_SHARPLINE_LEN	src/defs.h	/^#define MAX_SHARPLINE_LEN /;"	d
MEMBSIZE	src/mem.c	/^#define MEMBSIZE	/;"	d	file:
MINBLK	src/malloc.c	/^#define MINBLK /;"	d	file:
MIN_INDENT	src/niceprintf.c	/^#define MIN_INDENT /;"	d	file:
MSDOS	src/lex.c	/^#define MSDOS$/;"	d	file:
MSDOS	src/lex.c	/^#undef MSDOS$/;"	d	file:
MSDOS	src/mem.c	/^#undef MSDOS$/;"	d	file:
MSDOS	src/sysdep.c	/^#define MSDOS$/;"	d	file:
MSDOS	src/sysdep.c	/^#undef  MSDOS$/;"	d	file:
MSDOS	src/sysdep.h	/^#define MSDOS$/;"	d
MSKADDR	src/defines.h	/^#define MSKADDR	/;"	d
MSKCHAR	src/defines.h	/^#define MSKCHAR	/;"	d
MSKCOMPLEX	src/defines.h	/^#define MSKCOMPLEX	/;"	d
MSKINT	src/defines.h	/^#define MSKINT	/;"	d
MSKIREG	src/machdefs.h	/^#define MSKIREG /;"	d
MSKLOGICAL	src/defines.h	/^#define MSKLOGICAL	/;"	d
MSKREAL	src/defines.h	/^#define MSKREAL	/;"	d
MSKSTATIC	src/defines.h	/^#define MSKSTATIC /;"	d
MYQUOTE	src/lex.c	/^#define MYQUOTE /;"	d	file:
Max_ftn_files	src/main.c	/^LOCAL int Max_ftn_files;$/;"	v
Multitype	src/f2c.h	/^typedef union Multitype Multitype;$/;"	t	typeref:union:Multitype
Multitype	src/f2c.h	/^union Multitype {	\/* for multiple entry points *\/$/;"	u
NAMEDIRECTED	src/io.c	/^#define NAMEDIRECTED /;"	d	file:
NEGSTEP	src/exec.c	/^#define NEGSTEP	/;"	d	file:
NEWSTMT	src/lex.c	/^#define NEWSTMT	/;"	d	file:
NIOS	src/io.c	/^#define NIOS /;"	d	file:
NO	src/defines.h	/^#define NO /;"	d
NO66	src/defines.h	/^#define NO66(/;"	d
NOEXT	src/defines.h	/^#define NOEXT(/;"	d
NO_LONG_LONG	src/ftypes.h	/^#define NO_LONG_LONG$/;"	d
NO_LONG_LONG	src/ftypes.h	/^#undef NO_LONG_LONG$/;"	d
NPNULL	src/gram.c	/^#define NPNULL /;"	d	file:
NTYPES	src/ftypes.h	/^#define NTYPES /;"	d
NTYPES0	src/ftypes.h	/^#define NTYPES0 /;"	d
Nameblock	src/defs.h	/^struct Nameblock$/;"	s
Namelist	src/f2c.h	/^struct Namelist {$/;"	s
Namelist	src/f2c.h	/^typedef struct Namelist Namelist;$/;"	t	typeref:struct:Namelist
Namep	src/defs.h	/^typedef struct Nameblock *Namep;$/;"	t	typeref:struct:Nameblock
OBJECTS	src/Makefile	/^OBJECTS = $(OBJECTSd) $(MALLOC)$/;"	m
OBJECTSd	src/Makefile	/^OBJECTSd = main.o init.o gram.o lex.o proc.o equiv.o data.o format.o \\$/;"	m
ONEOF	src/defines.h	/^#define ONEOF(/;"	d
ONE_STRUCT	src/names.c	/^#define ONE_STRUCT /;"	d	file:
OPABS	src/defines.h	/^#define OPABS /;"	d
OPADDR	src/defines.h	/^#define OPADDR /;"	d
OPAND	src/defines.h	/^#define OPAND /;"	d
OPARROW	src/defines.h	/^#define OPARROW /;"	d
OPASSIGN	src/defines.h	/^#define OPASSIGN /;"	d
OPASSIGNI	src/defines.h	/^#define OPASSIGNI /;"	d
OPBITAND	src/defines.h	/^#define OPBITAND /;"	d
OPBITANDEQ	src/defines.h	/^#define OPBITANDEQ /;"	d
OPBITBITS	src/defines.h	/^#define OPBITBITS /;"	d
OPBITCLR	src/defines.h	/^#define OPBITCLR /;"	d
OPBITNOT	src/defines.h	/^#define OPBITNOT /;"	d
OPBITOR	src/defines.h	/^#define OPBITOR /;"	d
OPBITOREQ	src/defines.h	/^#define OPBITOREQ /;"	d
OPBITSET	src/defines.h	/^#define OPBITSET /;"	d
OPBITSH	src/defines.h	/^#define OPBITSH /;"	d
OPBITSHC	src/defines.h	/^#define OPBITSHC /;"	d
OPBITTEST	src/defines.h	/^#define OPBITTEST /;"	d
OPBITXOR	src/defines.h	/^#define OPBITXOR /;"	d
OPBITXOREQ	src/defines.h	/^#define OPBITXOREQ /;"	d
OPCALL	src/defines.h	/^#define OPCALL /;"	d
OPCCALL	src/defines.h	/^#define OPCCALL /;"	d
OPCHARCAST	src/defines.h	/^#define OPCHARCAST /;"	d
OPCOLON	src/defines.h	/^#define OPCOLON /;"	d
OPCOMMA	src/defines.h	/^#define OPCOMMA /;"	d
OPCOMMA_ARG	src/defines.h	/^#define OPCOMMA_ARG /;"	d
OPCONCAT	src/defines.h	/^#define OPCONCAT /;"	d
OPCONV	src/defines.h	/^#define OPCONV /;"	d
OPDABS	src/defines.h	/^#define OPDABS /;"	d
OPDMAX	src/defines.h	/^#define OPDMAX /;"	d
OPDMIN	src/defines.h	/^#define OPDMIN /;"	d
OPDOT	src/defines.h	/^#define OPDOT /;"	d
OPEQ	src/defines.h	/^#define OPEQ /;"	d
OPEQV	src/defines.h	/^#define OPEQV /;"	d
OPGE	src/defines.h	/^#define OPGE /;"	d
OPGT	src/defines.h	/^#define OPGT /;"	d
OPIDENTITY	src/defines.h	/^#define OPIDENTITY /;"	d
OPLE	src/defines.h	/^#define OPLE /;"	d
OPLSHIFT	src/defines.h	/^#define OPLSHIFT /;"	d
OPLSHIFTEQ	src/defines.h	/^#define OPLSHIFTEQ /;"	d
OPLT	src/defines.h	/^#define OPLT /;"	d
OPMAX	src/defines.h	/^#define OPMAX /;"	d
OPMAX2	src/defines.h	/^#define OPMAX2 /;"	d
OPMIN	src/defines.h	/^#define OPMIN /;"	d
OPMIN2	src/defines.h	/^#define OPMIN2 /;"	d
OPMINUS	src/defines.h	/^#define OPMINUS /;"	d
OPMINUSEQ	src/defines.h	/^#define OPMINUSEQ /;"	d
OPMOD	src/defines.h	/^#define OPMOD /;"	d
OPMODEQ	src/defines.h	/^#define OPMODEQ /;"	d
OPNE	src/defines.h	/^#define OPNE /;"	d
OPNEG	src/defines.h	/^#define OPNEG /;"	d
OPNEG1	src/defines.h	/^#define OPNEG1 /;"	d
OPNEG_KLUDGE	src/output.c	/^#define OPNEG_KLUDGE /;"	d	file:
OPNEQV	src/defines.h	/^#define OPNEQV /;"	d
OPNOT	src/defines.h	/^#define OPNOT /;"	d
OPOR	src/defines.h	/^#define OPOR /;"	d
OPPLUS	src/defines.h	/^#define OPPLUS /;"	d
OPPLUSEQ	src/defines.h	/^#define OPPLUSEQ /;"	d
OPPOWER	src/defines.h	/^#define OPPOWER /;"	d
OPPREDEC	src/defines.h	/^#define OPPREDEC /;"	d
OPPREINC	src/defines.h	/^#define OPPREINC /;"	d
OPQBITCLR	src/defines.h	/^#define OPQBITCLR /;"	d
OPQBITSET	src/defines.h	/^#define OPQBITSET /;"	d
OPQUEST	src/defines.h	/^#define OPQUEST /;"	d
OPRSHIFT	src/defines.h	/^#define OPRSHIFT /;"	d
OPRSHIFTEQ	src/defines.h	/^#define OPRSHIFTEQ /;"	d
OPSLASH	src/defines.h	/^#define OPSLASH /;"	d
OPSLASHEQ	src/defines.h	/^#define OPSLASHEQ /;"	d
OPSTAR	src/defines.h	/^#define OPSTAR /;"	d
OPSTAREQ	src/defines.h	/^#define OPSTAREQ /;"	d
OPWHATSIN	src/defines.h	/^#define OPWHATSIN /;"	d
OTHERTOKEN	src/lex.c	/^#define OTHERTOKEN	/;"	d	file:
OUTSIDE	src/defines.h	/^#define OUTSIDE /;"	d
O_BINARY	src/xsum.c	/^#define O_BINARY /;"	d	file:
O_RDONLY	src/xsum.c	/^#define O_RDONLY /;"	d	file:
P1_ADDR	src/p1defs.h	/^#define P1_ADDR /;"	d
P1_ASGOTO	src/p1defs.h	/^#define P1_ASGOTO /;"	d
P1_CHARP	src/p1defs.h	/^#define P1_CHARP /;"	d
P1_COMMENT	src/p1defs.h	/^#define P1_COMMENT /;"	d
P1_COMP_GOTO	src/p1defs.h	/^#define P1_COMP_GOTO /;"	d
P1_CONST	src/p1defs.h	/^#define P1_CONST /;"	d
P1_ELIF	src/p1defs.h	/^#define P1_ELIF /;"	d
P1_ELSE	src/p1defs.h	/^#define P1_ELSE /;"	d
P1_ELSEIFSTART	src/p1defs.h	/^#define P1_ELSEIFSTART /;"	d
P1_ENDELSE	src/p1defs.h	/^#define P1_ENDELSE /;"	d
P1_ENDFOR	src/p1defs.h	/^#define P1_ENDFOR /;"	d
P1_ENDIF	src/p1defs.h	/^#define P1_ENDIF /;"	d
P1_EOF	src/p1defs.h	/^#define P1_EOF /;"	d
P1_EXPR	src/p1defs.h	/^#define P1_EXPR /;"	d
P1_EXTERN	src/p1defs.h	/^#define P1_EXTERN /;"	d
P1_FILENAME	src/p1defs.h	/^#define P1_FILENAME /;"	d
P1_FILENAME_MAX	src/p1defs.h	/^#define P1_FILENAME_MAX	/;"	d
P1_FOR	src/p1defs.h	/^#define P1_FOR /;"	d
P1_FORTRAN	src/p1defs.h	/^#define P1_FORTRAN /;"	d
P1_GOTO	src/p1defs.h	/^#define P1_GOTO /;"	d
P1_HEAD	src/p1defs.h	/^#define P1_HEAD /;"	d
P1_IDENT	src/p1defs.h	/^#define P1_IDENT /;"	d
P1_IF	src/p1defs.h	/^#define P1_IF /;"	d
P1_LABEL	src/p1defs.h	/^#define P1_LABEL /;"	d
P1_LIST	src/p1defs.h	/^#define P1_LIST /;"	d
P1_LITERAL	src/p1defs.h	/^#define P1_LITERAL /;"	d
P1_NAME_POINTER	src/p1defs.h	/^#define P1_NAME_POINTER /;"	d
P1_PROCODE	src/p1defs.h	/^#define P1_PROCODE /;"	d
P1_SET_LINE	src/p1defs.h	/^#define P1_SET_LINE /;"	d
P1_STMTBUFSIZE	src/p1defs.h	/^#define P1_STMTBUFSIZE /;"	d
P1_SUBR_RET	src/p1defs.h	/^#define P1_SUBR_RET /;"	d
P1_UNKNOWN	src/p1defs.h	/^#define P1_UNKNOWN /;"	d
P1_WHILE1START	src/p1defs.h	/^#define P1_WHILE1START /;"	d
P1_WHILE2START	src/p1defs.h	/^#define P1_WHILE2START /;"	d
P2ANDAND	src/pccdefs.h	/^#define P2ANDAND /;"	d
P2ARIF	src/pccdefs.h	/^#define P2ARIF /;"	d
P2ASSIGN	src/pccdefs.h	/^#define P2ASSIGN /;"	d
P2BAD	src/pccdefs.h	/^#define P2BAD /;"	d
P2BITAND	src/pccdefs.h	/^#define P2BITAND /;"	d
P2BITNOT	src/pccdefs.h	/^#define P2BITNOT /;"	d
P2BITOR	src/pccdefs.h	/^#define P2BITOR /;"	d
P2BITXOR	src/pccdefs.h	/^#define P2BITXOR /;"	d
P2BUFFMAX	src/putpcc.c	/^#define P2BUFFMAX /;"	d	file:
P2CALL	src/pccdefs.h	/^#define P2CALL /;"	d
P2CALL0	src/pccdefs.h	/^#define P2CALL0 /;"	d
P2CBRANCH	src/pccdefs.h	/^#define P2CBRANCH /;"	d
P2CHAR	src/pccdefs.h	/^#define P2CHAR /;"	d
P2COLON	src/pccdefs.h	/^#define P2COLON /;"	d
P2COMOP	src/pccdefs.h	/^#define P2COMOP /;"	d
P2CONV	src/pccdefs.h	/^#define P2CONV /;"	d
P2DREAL	src/pccdefs.h	/^#define P2DREAL /;"	d
P2EOF	src/pccdefs.h	/^#define P2EOF /;"	d
P2EQ	src/pccdefs.h	/^#define P2EQ /;"	d
P2FORCE	src/pccdefs.h	/^#define P2FORCE /;"	d
P2FUNCT	src/pccdefs.h	/^#define P2FUNCT /;"	d
P2GE	src/pccdefs.h	/^#define P2GE /;"	d
P2GOTO	src/pccdefs.h	/^#define P2GOTO /;"	d
P2GT	src/pccdefs.h	/^#define P2GT /;"	d
P2ICON	src/pccdefs.h	/^#define P2ICON /;"	d
P2INDIRECT	src/pccdefs.h	/^#define P2INDIRECT /;"	d
P2INT	src/pccdefs.h	/^#define P2INT /;"	d
P2LABEL	src/pccdefs.h	/^#define P2LABEL /;"	d
P2LBRACKET	src/pccdefs.h	/^#define P2LBRACKET /;"	d
P2LE	src/pccdefs.h	/^#define P2LE /;"	d
P2LISTOP	src/pccdefs.h	/^#define P2LISTOP /;"	d
P2LONG	src/pccdefs.h	/^#define P2LONG /;"	d
P2LSHIFT	src/pccdefs.h	/^#define P2LSHIFT /;"	d
P2LT	src/pccdefs.h	/^#define P2LT /;"	d
P2MINUS	src/pccdefs.h	/^#define P2MINUS /;"	d
P2MOD	src/pccdefs.h	/^#define P2MOD /;"	d
P2NAME	src/pccdefs.h	/^#define P2NAME /;"	d
P2NE	src/pccdefs.h	/^#define P2NE /;"	d
P2NEG	src/pccdefs.h	/^#define P2NEG /;"	d
P2NOT	src/pccdefs.h	/^#define P2NOT /;"	d
P2OREG	src/pccdefs.h	/^#define P2OREG /;"	d
P2OROR	src/pccdefs.h	/^#define P2OROR /;"	d
P2PASS	src/pccdefs.h	/^#define P2PASS /;"	d
P2PLUS	src/pccdefs.h	/^#define P2PLUS /;"	d
P2PLUSEQ	src/pccdefs.h	/^#define P2PLUSEQ /;"	d
P2PTR	src/pccdefs.h	/^#define P2PTR /;"	d
P2QUEST	src/pccdefs.h	/^#define P2QUEST /;"	d
P2RBRACKET	src/pccdefs.h	/^#define P2RBRACKET /;"	d
P2REAL	src/pccdefs.h	/^#define P2REAL /;"	d
P2REG	src/pccdefs.h	/^#define P2REG /;"	d
P2RSHIFT	src/pccdefs.h	/^#define P2RSHIFT /;"	d
P2SHORT	src/pccdefs.h	/^#define P2SHORT /;"	d
P2SLASH	src/pccdefs.h	/^#define P2SLASH /;"	d
P2STAR	src/pccdefs.h	/^#define P2STAR /;"	d
P2STAREQ	src/pccdefs.h	/^#define P2STAREQ /;"	d
P2STMT	src/pccdefs.h	/^#define P2STMT /;"	d
P2SWITCH	src/pccdefs.h	/^#define P2SWITCH /;"	d
PAIR	src/putpcc.c	/^#define PAIR(/;"	d	file:
PARSE_INCLUDE	src/parse.h	/^#define PARSE_INCLUDE$/;"	d
PDP11	src/defines.h	/^#define PDP11 /;"	d
PEXTERNAL	src/defines.h	/^#define PEXTERNAL /;"	d
PINTRINSIC	src/defines.h	/^#define PINTRINSIC /;"	d
PNULL	src/defines.h	/^#define PNULL /;"	d
POSSTEP	src/exec.c	/^#define POSSTEP	/;"	d	file:
PROCBLOCK	src/defines.h	/^#define PROCBLOCK /;"	d
PROCFUNCT	src/defines.h	/^#define PROCFUNCT /;"	d
PROCMAIN	src/defines.h	/^#define PROCMAIN /;"	d
PROCSUBR	src/defines.h	/^#define PROCSUBR /;"	d
PSTFUNCT	src/defines.h	/^#define PSTFUNCT /;"	d
PTHISPROC	src/defines.h	/^#define PTHISPROC /;"	d
PUNKNOWN	src/defines.h	/^#define PUNKNOWN /;"	d
P_CASE_INSENSITIVE	src/parse.h	/^#define P_CASE_INSENSITIVE /;"	d
P_CHAR	src/parse.h	/^#define P_CHAR /;"	d
P_DOUBLE	src/parse.h	/^#define P_DOUBLE /;"	d
P_FILE	src/parse.h	/^#define P_FILE /;"	d
P_FLOAT	src/parse.h	/^#define P_FLOAT /;"	d
P_INFINITE_ARGS	src/parse.h	/^#define P_INFINITE_ARGS /;"	d
P_INT	src/parse.h	/^#define P_INT /;"	d
P_LONG	src/parse.h	/^#define P_LONG /;"	d
P_NEW_FILE	src/parse.h	/^#define P_NEW_FILE /;"	d
P_NO_ARGS	src/parse.h	/^#define P_NO_ARGS /;"	d
P_OLD_FILE	src/parse.h	/^#define P_OLD_FILE /;"	d
P_ONE_ARG	src/parse.h	/^#define P_ONE_ARG /;"	d
P_REQUIRED_PREFIX	src/parse.h	/^#define P_REQUIRED_PREFIX /;"	d
P_SHORT	src/parse.h	/^#define P_SHORT /;"	d
P_STRING	src/parse.h	/^#define P_STRING /;"	d
P_anum	src/pread.c	/^#define P_anum	/;"	d	file:
P_delim	src/pread.c	/^#define P_delim	/;"	d	file:
P_slash	src/pread.c	/^#define P_slash	/;"	d	file:
P_space	src/pread.c	/^#define P_space	/;"	d	file:
Paramblock	src/defs.h	/^struct Paramblock$/;"	s
Pbad	src/pread.c	/^ static int Pbad;$/;"	v	file:
Pbadmsg	src/pread.c	/^Pbadmsg(msg, p)$/;"	f	file:
Pbadret	src/pread.c	/^Pbadret(ftype, p)$/;"	f	file:
Pct	src/pread.c	/^ static char Ptok[128], Pct[Table_size];$/;"	v	file:
Pfile	src/pread.c	/^Pfile(fname)$/;"	f	file:
Pfname	src/pread.c	/^ static char *Pfname;$/;"	v	file:
Pftype	src/pread.c	/^Pftype(Void)$/;"	f	file:
Plineno	src/pread.c	/^ static long Plineno;$/;"	v	file:
Pnotboth	src/pread.c	/^Pnotboth(e)$/;"	f	file:
Primblock	src/defs.h	/^struct Primblock$/;"	s
Ptok	src/pread.c	/^ static char Ptok[128], Pct[Table_size];$/;"	v	file:
Ptoken	src/pread.c	/^Ptoken(pf, canend)$/;"	f	file:
Ptype	src/pread.c	/^Ptype(pf)$/;"	f	file:
Punctlist	src/lex.c	/^struct Punctlist {$/;"	s	file:
RETEOS	src/lex.c	/^#define RETEOS	/;"	d	file:
R_fp	src/f2c.h	/^typedef real (*R_fp)();$/;"	t
R_fp	src/f2c.h	/^typedef real (*R_fp)(...);$/;"	t
Rplblock	src/defs.h	/^struct Rplblock	\/* name replacement block *\/$/;"	s
SAND	src/gram.c	/^#define	SAND	/;"	d	file:
SAND	src/tokdefs.h	/^#define SAND /;"	d
SARITHIF	src/gram.c	/^#define	SARITHIF	/;"	d	file:
SARITHIF	src/tokdefs.h	/^#define SARITHIF /;"	d
SASGOTO	src/gram.c	/^#define	SASGOTO	/;"	d	file:
SASGOTO	src/tokdefs.h	/^#define SASGOTO /;"	d
SASSIGN	src/gram.c	/^#define	SASSIGN	/;"	d	file:
SASSIGN	src/tokdefs.h	/^#define SASSIGN /;"	d
SAUTOMATIC	src/gram.c	/^#define	SAUTOMATIC	/;"	d	file:
SAUTOMATIC	src/tokdefs.h	/^#define SAUTOMATIC /;"	d
SBACKSPACE	src/gram.c	/^#define	SBACKSPACE	/;"	d	file:
SBACKSPACE	src/tokdefs.h	/^#define SBACKSPACE /;"	d
SBGULP	src/malloc.c	/^#define SBGULP /;"	d	file:
SBITCON	src/gram.c	/^#define	SBITCON	/;"	d	file:
SBITCON	src/tokdefs.h	/^#define SBITCON /;"	d
SBLOCK	src/gram.c	/^#define	SBLOCK	/;"	d	file:
SBLOCK	src/tokdefs.h	/^#define SBLOCK /;"	d
SBYTE	src/gram.c	/^#define	SBYTE	/;"	d	file:
SBYTE	src/tokdefs.h	/^#define SBYTE /;"	d
SCALL	src/gram.c	/^#define	SCALL	/;"	d	file:
SCALL	src/tokdefs.h	/^#define SCALL /;"	d
SCHARACTER	src/gram.c	/^#define	SCHARACTER	/;"	d	file:
SCHARACTER	src/tokdefs.h	/^#define SCHARACTER /;"	d
SCLOSE	src/gram.c	/^#define	SCLOSE	/;"	d	file:
SCLOSE	src/tokdefs.h	/^#define SCLOSE /;"	d
SCOLON	src/gram.c	/^#define	SCOLON	/;"	d	file:
SCOLON	src/tokdefs.h	/^#define SCOLON /;"	d
SCOMMA	src/gram.c	/^#define	SCOMMA	/;"	d	file:
SCOMMA	src/tokdefs.h	/^#define SCOMMA /;"	d
SCOMMENT	src/gram.c	/^#define	SCOMMENT	/;"	d	file:
SCOMMENT	src/tokdefs.h	/^#define SCOMMENT /;"	d
SCOMMON	src/gram.c	/^#define	SCOMMON	/;"	d	file:
SCOMMON	src/tokdefs.h	/^#define SCOMMON /;"	d
SCOMPGOTO	src/gram.c	/^#define	SCOMPGOTO	/;"	d	file:
SCOMPGOTO	src/tokdefs.h	/^#define SCOMPGOTO /;"	d
SCOMPLEX	src/gram.c	/^#define	SCOMPLEX	/;"	d	file:
SCOMPLEX	src/tokdefs.h	/^#define SCOMPLEX /;"	d
SCONCAT	src/gram.c	/^#define	SCONCAT	/;"	d	file:
SCONCAT	src/tokdefs.h	/^#define SCONCAT /;"	d
SCONTINUE	src/gram.c	/^#define	SCONTINUE	/;"	d	file:
SCONTINUE	src/tokdefs.h	/^#define SCONTINUE /;"	d
SCURRENCY	src/gram.c	/^#define	SCURRENCY	/;"	d	file:
SCURRENCY	src/tokdefs.h	/^#define SCURRENCY /;"	d
SDATA	src/gram.c	/^#define	SDATA	/;"	d	file:
SDATA	src/tokdefs.h	/^#define SDATA /;"	d
SDCOMPLEX	src/gram.c	/^#define	SDCOMPLEX	/;"	d	file:
SDCOMPLEX	src/tokdefs.h	/^#define SDCOMPLEX /;"	d
SDCON	src/gram.c	/^#define	SDCON	/;"	d	file:
SDCON	src/tokdefs.h	/^#define SDCON /;"	d
SDIMENSION	src/gram.c	/^#define	SDIMENSION	/;"	d	file:
SDIMENSION	src/tokdefs.h	/^#define SDIMENSION /;"	d
SDO	src/gram.c	/^#define	SDO	/;"	d	file:
SDO	src/tokdefs.h	/^#define SDO /;"	d
SDOUBLE	src/gram.c	/^#define	SDOUBLE	/;"	d	file:
SDOUBLE	src/tokdefs.h	/^#define SDOUBLE /;"	d
SELSE	src/gram.c	/^#define	SELSE	/;"	d	file:
SELSE	src/tokdefs.h	/^#define SELSE /;"	d
SELSEIF	src/gram.c	/^#define	SELSEIF	/;"	d	file:
SELSEIF	src/tokdefs.h	/^#define SELSEIF /;"	d
SEM_CHECK	src/format.c	/^#define SEM_CHECK(/;"	d	file:
SEND	src/gram.c	/^#define	SEND	/;"	d	file:
SEND	src/tokdefs.h	/^#define SEND /;"	d
SENDDO	src/gram.c	/^#define	SENDDO	/;"	d	file:
SENDDO	src/tokdefs.h	/^#define SENDDO /;"	d
SENDFILE	src/gram.c	/^#define	SENDFILE	/;"	d	file:
SENDFILE	src/tokdefs.h	/^#define SENDFILE /;"	d
SENDIF	src/gram.c	/^#define	SENDIF	/;"	d	file:
SENDIF	src/tokdefs.h	/^#define SENDIF /;"	d
SENTRY	src/gram.c	/^#define	SENTRY	/;"	d	file:
SENTRY	src/tokdefs.h	/^#define SENTRY /;"	d
SEOF	src/lex.c	/^#define SEOF /;"	d	file:
SEOS	src/gram.c	/^#define	SEOS	/;"	d	file:
SEOS	src/tokdefs.h	/^#define SEOS /;"	d
SEQ	src/gram.c	/^#define	SEQ	/;"	d	file:
SEQ	src/tokdefs.h	/^#define SEQ /;"	d
SEQUALS	src/gram.c	/^#define	SEQUALS	/;"	d	file:
SEQUALS	src/tokdefs.h	/^#define SEQUALS /;"	d
SEQUIV	src/gram.c	/^#define	SEQUIV	/;"	d	file:
SEQUIV	src/tokdefs.h	/^#define SEQUIV /;"	d
SEQV	src/gram.c	/^#define	SEQV	/;"	d	file:
SEQV	src/tokdefs.h	/^#define SEQV /;"	d
SEXTERNAL	src/gram.c	/^#define	SEXTERNAL	/;"	d	file:
SEXTERNAL	src/tokdefs.h	/^#define SEXTERNAL /;"	d
SFALSE	src/gram.c	/^#define	SFALSE	/;"	d	file:
SFALSE	src/tokdefs.h	/^#define SFALSE /;"	d
SFIELD	src/gram.c	/^#define	SFIELD	/;"	d	file:
SFIELD	src/tokdefs.h	/^#define SFIELD /;"	d
SFORMAT	src/gram.c	/^#define	SFORMAT	/;"	d	file:
SFORMAT	src/tokdefs.h	/^#define SFORMAT /;"	d
SFUNCTION	src/gram.c	/^#define	SFUNCTION	/;"	d	file:
SFUNCTION	src/tokdefs.h	/^#define SFUNCTION /;"	d
SGE	src/gram.c	/^#define	SGE	/;"	d	file:
SGE	src/tokdefs.h	/^#define SGE /;"	d
SGOTO	src/gram.c	/^#define	SGOTO	/;"	d	file:
SGOTO	src/tokdefs.h	/^#define SGOTO /;"	d
SGT	src/gram.c	/^#define	SGT	/;"	d	file:
SGT	src/tokdefs.h	/^#define SGT /;"	d
SHELL	src/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHEXCON	src/gram.c	/^#define	SHEXCON	/;"	d	file:
SHEXCON	src/tokdefs.h	/^#define SHEXCON /;"	d
SHOLLERITH	src/gram.c	/^#define	SHOLLERITH	/;"	d	file:
SHOLLERITH	src/tokdefs.h	/^#define SHOLLERITH /;"	d
SICON	src/gram.c	/^#define	SICON	/;"	d	file:
SICON	src/tokdefs.h	/^#define SICON /;"	d
SIGHUP	src/usignal.h	/^#define	SIGHUP	/;"	d
SIGQUIT	src/usignal.h	/^#define	SIGQUIT	/;"	d
SIMPLICIT	src/gram.c	/^#define	SIMPLICIT	/;"	d	file:
SIMPLICIT	src/tokdefs.h	/^#define SIMPLICIT /;"	d
SINCLUDE	src/gram.c	/^#define	SINCLUDE	/;"	d	file:
SINCLUDE	src/tokdefs.h	/^#define SINCLUDE /;"	d
SINQUIRE	src/gram.c	/^#define	SINQUIRE	/;"	d	file:
SINQUIRE	src/tokdefs.h	/^#define SINQUIRE /;"	d
SINTEGER	src/gram.c	/^#define	SINTEGER	/;"	d	file:
SINTEGER	src/tokdefs.h	/^#define SINTEGER /;"	d
SINTRINSIC	src/gram.c	/^#define	SINTRINSIC	/;"	d	file:
SINTRINSIC	src/tokdefs.h	/^#define SINTRINSIC /;"	d
SLABEL	src/gram.c	/^#define	SLABEL	/;"	d	file:
SLABEL	src/tokdefs.h	/^#define SLABEL /;"	d
SLE	src/gram.c	/^#define	SLE	/;"	d	file:
SLE	src/tokdefs.h	/^#define SLE /;"	d
SLET	src/gram.c	/^#define	SLET	/;"	d	file:
SLET	src/tokdefs.h	/^#define SLET /;"	d
SLOGICAL	src/gram.c	/^#define	SLOGICAL	/;"	d	file:
SLOGICAL	src/tokdefs.h	/^#define SLOGICAL /;"	d
SLOGIF	src/gram.c	/^#define	SLOGIF	/;"	d	file:
SLOGIF	src/tokdefs.h	/^#define SLOGIF /;"	d
SLPAR	src/gram.c	/^#define	SLPAR	/;"	d	file:
SLPAR	src/tokdefs.h	/^#define SLPAR /;"	d
SLT	src/gram.c	/^#define	SLT	/;"	d	file:
SLT	src/tokdefs.h	/^#define SLT /;"	d
SMINUS	src/gram.c	/^#define	SMINUS	/;"	d	file:
SMINUS	src/tokdefs.h	/^#define SMINUS /;"	d
SNAME	src/gram.c	/^#define	SNAME	/;"	d	file:
SNAME	src/tokdefs.h	/^#define SNAME /;"	d
SNAMEEQ	src/gram.c	/^#define	SNAMEEQ	/;"	d	file:
SNAMEEQ	src/tokdefs.h	/^#define SNAMEEQ /;"	d
SNAMELIST	src/gram.c	/^#define	SNAMELIST	/;"	d	file:
SNAMELIST	src/tokdefs.h	/^#define SNAMELIST /;"	d
SNE	src/gram.c	/^#define	SNE	/;"	d	file:
SNE	src/tokdefs.h	/^#define SNE /;"	d
SNEQV	src/gram.c	/^#define	SNEQV	/;"	d	file:
SNEQV	src/tokdefs.h	/^#define SNEQV /;"	d
SNOT	src/gram.c	/^#define	SNOT	/;"	d	file:
SNOT	src/tokdefs.h	/^#define SNOT /;"	d
SOCTCON	src/gram.c	/^#define	SOCTCON	/;"	d	file:
SOCTCON	src/tokdefs.h	/^#define SOCTCON /;"	d
SOPEN	src/gram.c	/^#define	SOPEN	/;"	d	file:
SOPEN	src/tokdefs.h	/^#define SOPEN /;"	d
SOR	src/gram.c	/^#define	SOR	/;"	d	file:
SOR	src/tokdefs.h	/^#define SOR /;"	d
SPARAM	src/gram.c	/^#define	SPARAM	/;"	d	file:
SPARAM	src/tokdefs.h	/^#define SPARAM /;"	d
SPAUSE	src/gram.c	/^#define	SPAUSE	/;"	d	file:
SPAUSE	src/tokdefs.h	/^#define SPAUSE /;"	d
SPECIAL_FMT	src/output.h	/^#define SPECIAL_FMT /;"	d
SPLUS	src/gram.c	/^#define	SPLUS	/;"	d	file:
SPLUS	src/tokdefs.h	/^#define SPLUS /;"	d
SPOWER	src/gram.c	/^#define	SPOWER	/;"	d	file:
SPOWER	src/tokdefs.h	/^#define SPOWER /;"	d
SPRINT	src/gram.c	/^#define	SPRINT	/;"	d	file:
SPRINT	src/tokdefs.h	/^#define SPRINT /;"	d
SPRINTF	src/niceprintf.c	/^#define SPRINTF(/;"	d	file:
SPROGRAM	src/gram.c	/^#define	SPROGRAM	/;"	d	file:
SPROGRAM	src/tokdefs.h	/^#define SPROGRAM /;"	d
SPUNCH	src/gram.c	/^#define	SPUNCH	/;"	d	file:
SPUNCH	src/tokdefs.h	/^#define SPUNCH /;"	d
SRCON	src/gram.c	/^#define	SRCON	/;"	d	file:
SRCON	src/tokdefs.h	/^#define SRCON /;"	d
SREAD	src/gram.c	/^#define	SREAD	/;"	d	file:
SREAD	src/tokdefs.h	/^#define SREAD /;"	d
SREAL	src/gram.c	/^#define	SREAL	/;"	d	file:
SREAL	src/tokdefs.h	/^#define SREAL /;"	d
SRETURN	src/gram.c	/^#define	SRETURN	/;"	d	file:
SRETURN	src/tokdefs.h	/^#define SRETURN /;"	d
SREWIND	src/gram.c	/^#define	SREWIND	/;"	d	file:
SREWIND	src/tokdefs.h	/^#define SREWIND /;"	d
SRPAR	src/gram.c	/^#define	SRPAR	/;"	d	file:
SRPAR	src/tokdefs.h	/^#define SRPAR /;"	d
SSAVE	src/gram.c	/^#define	SSAVE	/;"	d	file:
SSAVE	src/tokdefs.h	/^#define SSAVE /;"	d
SSCALE	src/gram.c	/^#define	SSCALE	/;"	d	file:
SSCALE	src/tokdefs.h	/^#define SSCALE /;"	d
SSLASH	src/gram.c	/^#define	SSLASH	/;"	d	file:
SSLASH	src/tokdefs.h	/^#define SSLASH /;"	d
SSLASHD	src/gram.c	/^#define	SSLASHD	/;"	d	file:
SSLASHD	src/tokdefs.h	/^#define SSLASHD /;"	d
SSTAR	src/gram.c	/^#define	SSTAR	/;"	d	file:
SSTAR	src/tokdefs.h	/^#define SSTAR /;"	d
SSTATIC	src/gram.c	/^#define	SSTATIC	/;"	d	file:
SSTATIC	src/tokdefs.h	/^#define SSTATIC /;"	d
SSTOP	src/gram.c	/^#define	SSTOP	/;"	d	file:
SSTOP	src/tokdefs.h	/^#define SSTOP /;"	d
SSUBROUTINE	src/gram.c	/^#define	SSUBROUTINE	/;"	d	file:
SSUBROUTINE	src/tokdefs.h	/^#define SSUBROUTINE /;"	d
STACKMIN	src/malloc.c	/^#define STACKMIN /;"	d	file:
STCONTINUE	src/lex.c	/^#define STCONTINUE /;"	d	file:
STEOF	src/lex.c	/^#define STEOF /;"	d	file:
STGARG	src/defines.h	/^#define STGARG /;"	d
STGAUTO	src/defines.h	/^#define STGAUTO /;"	d
STGBSS	src/defines.h	/^#define STGBSS /;"	d
STGCOMMON	src/defines.h	/^#define STGCOMMON /;"	d
STGCONST	src/defines.h	/^#define STGCONST /;"	d
STGEQUIV	src/defines.h	/^#define STGEQUIV /;"	d
STGEXT	src/defines.h	/^#define STGEXT /;"	d
STGINIT	src/defines.h	/^#define STGINIT /;"	d
STGINTR	src/defines.h	/^#define STGINTR /;"	d
STGLENG	src/defines.h	/^#define STGLENG /;"	d
STGMEMNO	src/defines.h	/^#define STGMEMNO /;"	d
STGNULL	src/defines.h	/^#define STGNULL /;"	d
STGREG	src/defines.h	/^#define STGREG /;"	d
STGSTFUNCT	src/defines.h	/^#define STGSTFUNCT /;"	d
STGUNKNOWN	src/defines.h	/^#define STGUNKNOWN /;"	d
STHEN	src/gram.c	/^#define	STHEN	/;"	d	file:
STHEN	src/tokdefs.h	/^#define STHEN /;"	d
STINITIAL	src/lex.c	/^#define STINITIAL /;"	d	file:
STO	src/gram.c	/^#define	STO	/;"	d	file:
STO	src/tokdefs.h	/^#define STO /;"	d
STRUE	src/gram.c	/^#define	STRUE	/;"	d	file:
STRUE	src/tokdefs.h	/^#define STRUE /;"	d
SUNDEFINED	src/gram.c	/^#define	SUNDEFINED	/;"	d	file:
SUNDEFINED	src/tokdefs.h	/^#define SUNDEFINED /;"	d
SUNKNOWN	src/gram.c	/^#define	SUNKNOWN	/;"	d	file:
SUNKNOWN	src/tokdefs.h	/^#define SUNKNOWN /;"	d
SWHILE	src/gram.c	/^#define	SWHILE	/;"	d	file:
SWHILE	src/tokdefs.h	/^#define SWHILE /;"	d
SWRITE	src/gram.c	/^#define	SWRITE	/;"	d	file:
SWRITE	src/tokdefs.h	/^#define SWRITE /;"	d
SZADDR	src/machdefs.h	/^#define SZADDR	/;"	d
SZDREAL	src/machdefs.h	/^#define SZDREAL /;"	d
SZFLAG	src/io.c	/^#define SZFLAG /;"	d	file:
SZINT	src/machdefs.h	/^#define SZINT	/;"	d
SZIOINT	src/io.c	/^#define SZIOINT /;"	d	file:
SZLENG	src/machdefs.h	/^#define SZLENG	/;"	d
SZLONG	src/machdefs.h	/^#define SZLONG	/;"	d
SZSHORT	src/machdefs.h	/^#define SZSHORT	/;"	d
S_fp	src/f2c.h	/^typedef \/* Subroutine *\/ int (*S_fp)();$/;"	t
S_fp	src/f2c.h	/^typedef \/* Subroutine *\/ int (*S_fp)(...);$/;"	t
Specblock	src/intr.c	/^LOCAL struct Specblock$/;"	s	file:
TADDR	src/defines.h	/^#define TADDR /;"	d
TCONST	src/defines.h	/^#define TCONST /;"	d
TERROR	src/defines.h	/^#define TERROR /;"	d
TEXPR	src/defines.h	/^#define TEXPR /;"	d
TGULP	src/pread.c	/^#define TGULP	/;"	d	file:
TIMPLDO	src/defines.h	/^#define TIMPLDO /;"	d
TLIST	src/defines.h	/^#define TLIST /;"	d
TNAME	src/defines.h	/^#define TNAME /;"	d
TOO_LONG_INDENT	src/niceprintf.c	/^#define TOO_LONG_INDENT /;"	d	file:
TPRIM	src/defines.h	/^#define TPRIM /;"	d
TRUE	src/output.c	/^#define TRUE /;"	d	file:
TRUE	src/parse_args.c	/^#define TRUE /;"	d	file:
TRUE_	src/f2c.h	/^#define TRUE_ /;"	d
TYADDR	src/ftypes.h	/^#define TYADDR /;"	d
TYALIST	src/ftypes.h	/^#define TYALIST /;"	d
TYBLANK	src/ftypes.h	/^#define TYBLANK /;"	d
TYCHAR	src/ftypes.h	/^#define TYCHAR /;"	d
TYCILIST	src/ftypes.h	/^#define TYCILIST /;"	d
TYCLLIST	src/ftypes.h	/^#define TYCLLIST /;"	d
TYCOMPLEX	src/ftypes.h	/^#define TYCOMPLEX /;"	d
TYDCOMPLEX	src/ftypes.h	/^#define TYDCOMPLEX /;"	d
TYDREAL	src/ftypes.h	/^#define TYDREAL /;"	d
TYERROR	src/ftypes.h	/^#define TYERROR /;"	d
TYFTNLEN	src/ftypes.h	/^#define TYFTNLEN /;"	d
TYICILIST	src/ftypes.h	/^#define TYICILIST /;"	d
TYINLIST	src/ftypes.h	/^#define TYINLIST /;"	d
TYINT	src/machdefs.h	/^#define TYINT	/;"	d
TYINT1	src/ftypes.h	/^#define TYINT1 /;"	d
TYIOINT	src/io.c	/^#define TYIOINT /;"	d	file:
TYIREG	src/machdefs.h	/^#define TYIREG /;"	d
TYLABEL	src/ftypes.h	/^#define TYLABEL /;"	d
TYLENG	src/machdefs.h	/^#define TYLENG	/;"	d
TYLOGICAL	src/ftypes.h	/^#define TYLOGICAL /;"	d
TYLOGICAL1	src/ftypes.h	/^#define TYLOGICAL1 /;"	d
TYLOGICAL2	src/ftypes.h	/^#define TYLOGICAL2 /;"	d
TYLONG	src/ftypes.h	/^#define TYLONG /;"	d
TYOLIST	src/ftypes.h	/^#define TYOLIST /;"	d
TYQUAD	src/ftypes.h	/^#define TYQUAD /;"	d
TYQUAD	src/ftypes.h	/^#undef TYQUAD$/;"	d
TYQUAD0	src/ftypes.h	/^#define TYQUAD0$/;"	d
TYQUAD0	src/ftypes.h	/^#undef TYQUAD0$/;"	d
TYQUAD_inc	src/ftypes.h	/^#define TYQUAD_inc /;"	d
TYREAL	src/ftypes.h	/^#define TYREAL /;"	d
TYSHORT	src/ftypes.h	/^#define TYSHORT /;"	d
TYSUBR	src/ftypes.h	/^#define TYSUBR /;"	d
TYUNKNOWN	src/ftypes.h	/^#define TYUNKNOWN /;"	d
TYVOID	src/ftypes.h	/^#define TYVOID /;"	d
Table_size	src/sysdep.h	/^#define Table_size /;"	d
Typename	src/init.c	/^char *Typename[] = {$/;"	v
ULlong	src/ftypes.h	/^typedef unsigned long long ULlong;$/;"	t
UNAM_CHARP	src/defines.h	/^#define UNAM_CHARP /;"	d
UNAM_CONST	src/defines.h	/^#define UNAM_CONST /;"	d
UNAM_EXTERN	src/defines.h	/^#define UNAM_EXTERN /;"	d
UNAM_IDENT	src/defines.h	/^#define UNAM_IDENT /;"	d
UNAM_NAME	src/defines.h	/^#define UNAM_NAME /;"	d
UNAM_REF	src/defines.h	/^#define UNAM_REF /;"	d
UNAM_UNKNOWN	src/defines.h	/^#define UNAM_UNKNOWN /;"	d
UNARY_OP	src/output.h	/^#define UNARY_OP /;"	d
UNFORMATTED	src/io.c	/^#define UNFORMATTED /;"	d	file:
UNION_STRUCT	src/names.c	/^#define UNION_STRUCT /;"	d	file:
USC	src/lex.c	/^#define USC /;"	d	file:
USER_LABEL_MAX	src/names.h	/^#define USER_LABEL_MAX /;"	d
U_fp	src/f2c.h	/^typedef int \/* Unknown procedure type *\/ (*U_fp)();$/;"	t
U_fp	src/f2c.h	/^typedef int \/* Unknown procedure type *\/ (*U_fp)(...);$/;"	t
Uchar	src/xsum.c	/^typedef unsigned char Uchar;$/;"	t	file:
Ulong	src/formatdata.c	/^typedef unsigned long Ulong;$/;"	t	file:
Un_link_all	src/sysdep.c	/^Un_link_all(cdelete)$/;"	f
Unsigned	src/malloc.c	/^#define Unsigned /;"	d	file:
V	src/io.c	/^#define V(/;"	d	file:
VARSTEP	src/exec.c	/^#define VARSTEP	/;"	d	file:
VNAME_MAX	src/formatdata.c	/^#define VNAME_MAX /;"	d	file:
VOID	src/f2c.h	/^#define VOID /;"	d
Vardesc	src/f2c.h	/^struct Vardesc {	\/* for Namelist *\/$/;"	s
Vardesc	src/f2c.h	/^typedef struct Vardesc Vardesc;$/;"	t	typeref:struct:Vardesc
Void	src/defs.h	/^#define Void /;"	d
WANT_spawnvp	src/sysdep.c	/^#define WANT_spawnvp$/;"	d	file:
WANT_spawnvp	src/sysdep.c	/^#undef WANT_spawnvp$/;"	d	file:
XACCESS	src/io.c	/^#define XACCESS	/;"	d	file:
XBLANK	src/io.c	/^#define XBLANK	/;"	d	file:
XCLSTATUS	src/io.c	/^#define XCLSTATUS	/;"	d	file:
XDIRECT	src/io.c	/^#define XDIRECT	/;"	d	file:
XDIRLEN	src/io.c	/^#define XDIRLEN	/;"	d	file:
XEND	src/io.c	/^#define XEND	/;"	d	file:
XERR	src/io.c	/^#define XERR /;"	d	file:
XEXISTS	src/io.c	/^#define XEXISTS	/;"	d	file:
XFILE	src/io.c	/^#define XFILE	/;"	d	file:
XFILELEN	src/io.c	/^#define XFILELEN	/;"	d	file:
XFMT	src/io.c	/^#define XFMT	/;"	d	file:
XFMTED	src/io.c	/^#define XFMTED	/;"	d	file:
XFMTEDLEN	src/io.c	/^#define XFMTEDLEN	/;"	d	file:
XFNAME	src/io.c	/^#define XFNAME	/;"	d	file:
XFNAMELEN	src/io.c	/^#define XFNAMELEN	/;"	d	file:
XFORM	src/io.c	/^#define XFORM	/;"	d	file:
XFORMATTED	src/io.c	/^#define XFORMATTED	/;"	d	file:
XFORMLEN	src/io.c	/^#define XFORMLEN	/;"	d	file:
XIEND	src/io.c	/^#define XIEND	/;"	d	file:
XIFMT	src/io.c	/^#define XIFMT	/;"	d	file:
XIREC	src/io.c	/^#define XIREC	/;"	d	file:
XIRLEN	src/io.c	/^#define XIRLEN	/;"	d	file:
XIRNUM	src/io.c	/^#define XIRNUM	/;"	d	file:
XIUNIT	src/io.c	/^#define XIUNIT	/;"	d	file:
XNAME	src/io.c	/^#define XNAME	/;"	d	file:
XNAMED	src/io.c	/^#define XNAMED	/;"	d	file:
XNAMELEN	src/io.c	/^#define XNAMELEN	/;"	d	file:
XNEXTREC	src/io.c	/^#define XNEXTREC	/;"	d	file:
XNUMBER	src/io.c	/^#define XNUMBER	/;"	d	file:
XOPEN	src/io.c	/^#define XOPEN	/;"	d	file:
XQACCESS	src/io.c	/^#define XQACCESS	/;"	d	file:
XQACCLEN	src/io.c	/^#define XQACCLEN	/;"	d	file:
XQBLANK	src/io.c	/^#define XQBLANK	/;"	d	file:
XQBLANKLEN	src/io.c	/^#define XQBLANKLEN	/;"	d	file:
XQRECL	src/io.c	/^#define XQRECL	/;"	d	file:
XREC	src/io.c	/^#define XREC	/;"	d	file:
XRECLEN	src/io.c	/^#define XRECLEN	/;"	d	file:
XSEQ	src/io.c	/^#define XSEQ	/;"	d	file:
XSEQLEN	src/io.c	/^#define XSEQLEN	/;"	d	file:
XSTATUS	src/io.c	/^#define XSTATUS	/;"	d	file:
XUNFMT	src/io.c	/^#define XUNFMT	/;"	d	file:
XUNFMTLEN	src/io.c	/^#define XUNFMTLEN	/;"	d	file:
XUNIT	src/io.c	/^#define XUNIT	/;"	d	file:
YACC	src/Makefile	/^YACC = yacc$/;"	m
YES	src/defines.h	/^#define YES /;"	d
YFLAGS	src/Makefile	/^YFLAGS =$/;"	m
YYABORT	src/gram.c	/^#define YYABORT	/;"	d	file:
YYACCEPT	src/gram.c	/^#define YYACCEPT	/;"	d	file:
YYEOFCODE	src/gram.c	/^#define YYEOFCODE /;"	d	file:
YYERRCODE	src/gram.c	/^#define YYERRCODE /;"	d	file:
YYERROR	src/gram.c	/^#define YYERROR	/;"	d	file:
YYFLAG	src/gram.c	/^#define YYFLAG /;"	d	file:
YYLAST	src/gram.c	/^#define	YYLAST	/;"	d	file:
YYMAXDEPTH	src/gram.c	/^#define	YYMAXDEPTH	/;"	d	file:
YYNPROD	src/gram.c	/^#define	YYNPROD	/;"	d	file:
YYPRIVATE	src/gram.c	/^#define	YYPRIVATE /;"	d	file:
YYSTYPE	src/gram.c	/^	} YYSTYPE;$/;"	t	typeref:union:__anon20	file:
Z_f	src/f2c.h	/^typedef VOID Z_f;	\/* double complex function *\/$/;"	t
Z_fp	src/f2c.h	/^typedef \/* Double Complex *\/ VOID (*Z_fp)();$/;"	t
Z_fp	src/f2c.h	/^typedef \/* Double Complex *\/ VOID (*Z_fp)(...);$/;"	t
_POSIX_SOURCE	src/xsum.c	/^#define _POSIX_SOURCE$/;"	d	file:
_POSIX_SOURCE	src/xsum.c	/^#undef  _POSIX_SOURCE$/;"	d	file:
_P_WAIT	src/sysdep.c	/^#define _P_WAIT /;"	d	file:
_assoc_table	src/output.c	/^char _assoc_table[] = { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 };$/;"	v
aawalk	src/vax.c	/^aawalk(P)$/;"	f	file:
abs	src/f2c.h	/^#define abs(/;"	d
add_extern_to_list	src/misc.c	/^add_extern_to_list(addr, list_store)$/;"	f
addftnsrc	src/main.c	/^int addftnsrc = NO;		\/* Include ftn source in output *\/$/;"	v
addr	src/f2c.h	/^	char *addr;$/;"	m	struct:Vardesc
addrblock	src/defs.h	/^	struct Addrblock addrblock;$/;"	m	union:Expression	typeref:struct:Expression::Addrblock
address	src/f2c.h	/^typedef char *address;$/;"	t
addressable	src/misc.c	/^addressable(p) expptr p;$/;"	f
addrfix	src/putpcc.c	/^addrfix(e)$/;"	f
addrlit	src/format.c	/^addrlit(addrp)$/;"	f
addrof	src/expr.c	/^addrof(p)$/;"	f
addunder	src/misc.c	/^addunder(s)$/;"	f
adjtoklen	src/lex.c	/^adjtoklen(newlen)$/;"	f
adjust_arginfo	src/expr.c	/^adjust_arginfo(np)$/;"	f	file:
adjust_pointer_in_string	src/niceprintf.c	/^adjust_pointer_in_string(pointer)$/;"	f	file:
aerr	src/f2c.h	/^{	flag aerr;$/;"	m	struct:__anon18
afwalk	src/vax.c	/^afwalk(P)$/;"	f	file:
alist	src/f2c.h	/^} alist;$/;"	t	typeref:struct:__anon18
alist_names	src/io.c	/^LOCAL char *alist_names[] = {$/;"	v
allargs	src/init.c	/^chainp allargs;			\/* union of args in all entry points *\/$/;"	v
allextp	src/defs.h	/^	chainp allextp;		\/* List of lists of identifiers; we keep one$/;"	m	struct:Extsym
alloc_names	src/sysdep.c	/^alloc_names(Void)$/;"	f	file:
allow_i8c	src/main.c	/^flag allow_i8c = YES;$/;"	v
analyz	src/lex.c	/^analyz(Void)$/;"	f
anum_buf	src/lex.c	/^static char anum_buf[Table_size];$/;"	v	file:
arg_count	src/parse_args.c	/^#define arg_count(/;"	d	file:
arg_flags	src/parse_args.c	/^#define arg_flags(/;"	d	file:
arg_info	src/parse.h	/^} arg_info;$/;"	t	typeref:struct:__anon23
arg_parse	src/parse_args.c	/^arg_parse(str, entry)$/;"	f	file:
arg_prefix	src/parse_args.c	/^#define arg_prefix(/;"	d	file:
arg_result_ptr	src/parse_args.c	/^#define arg_result_ptr(/;"	d	file:
arg_result_type	src/parse_args.c	/^#define arg_result_type(/;"	d	file:
arg_string	src/parse_args.c	/^#define arg_string(/;"	d	file:
arg_table_size	src/parse_args.c	/^#define arg_table_size(/;"	d	file:
arg_verify	src/parse_args.c	/^arg_verify(argv, table, entries)$/;"	f
arginfo	src/defs.h	/^	Argtypes *arginfo;$/;"	m	struct:Extsym
arginfo	src/defs.h	/^	Argtypes *arginfo;$/;"	m	struct:Nameblock
argkludge	src/sysdep.c	/^argkludge(pargc, pargv) int *pargc; char ***pargv;$/;"	f
arglist	src/defs.h	/^	chainp arglist;$/;"	m	struct:Entrypoint
argno	src/defs.h	/^	int argno;		\/* for multiple entries *\/$/;"	m	struct:Nameblock
argsort	src/vax.c	/^argsort(p0)$/;"	f	file:
argsp	src/defs.h	/^	struct Listblock *argsp;$/;"	m	struct:Primblock	typeref:struct:Primblock::Listblock
argverify	src/pread.c	/^argverify(ftype, p)$/;"	f	file:
asg_addr	src/io.c	/^asg_addr(p)$/;"	f
assigned_fmts	src/init.c	/^chainp assigned_fmts = CHNULL;	\/* assigned formats *\/$/;"	v
assigned_values	src/defs.h	/^		chainp assigned_values;	\/* list of integers, each being a$/;"	m	union:Nameblock::__anon4
atof	src/defs.h	/^#define atof(/;"	d
atype	src/intr.c	/^	char atype;		\/* Argument type; every arg must have$/;"	m	struct:Specblock	file:
atype_squawk	src/putpcc.c	/^atype_squawk(at, msg)$/;"	f	file:
atypes	src/defs.h	/^	Atype atypes[1];$/;"	m	struct:__anon2
aunit	src/f2c.h	/^	ftnint aunit;$/;"	m	struct:__anon18
autonum	src/init.c	/^int autonum[TYVOID];$/;"	v
autovar	src/proc.c	/^autovar(nelt0, t, lengp, name)$/;"	f
av_pfix	src/init.c	/^char *av_pfix[TYVOID] = {"??TYUNKNOWN??", "a","i1","s","i",$/;"	v
awalk	src/vax.c	/^awalk(e)$/;"	f	file:
b	src/Makefile	/^b = Notice README cds.c data.c defines.h defs.h equiv.c error.c \\$/;"	m
backup	src/misc.c	/^backup(fname, bname)$/;"	f
bad_atypes	src/putpcc.c	/^bad_atypes(at, fname, i, j, k, here, prev)$/;"	f
bad_dimtype	src/proc.c	/^bad_dimtype(q) Namep q;$/;"	f	file:
bad_type	src/pread.c	/^bad_type(Void)$/;"	f	file:
badargs	src/main.c	/^int badargs;$/;"	v
badchar	src/pread.c	/^badchar(c)$/;"	f	file:
badchleng	src/expr.c	/^badchleng(p)$/;"	f
badflag	src/pread.c	/^badflag(tname, option)$/;"	f	file:
badop	src/error.c	/^badop(r, t)$/;"	f
badstg	src/error.c	/^badstg(r, t)$/;"	f
badtag	src/error.c	/^badtag(r, t)$/;"	f
badthing	src/error.c	/^badthing(thing, r, t)$/;"	f
badtype	src/error.c	/^badtype(r, t)$/;"	f
bang	src/lex.c	/^bang(a, b, c, d, e)$/;"	f	file:
baseoffset	src/defs.h	/^	expptr baseoffset;	\/* a constant or local variable holding$/;"	m	struct:Dimblock
basexpr	src/defs.h	/^	expptr basexpr;		\/* expression for comuting the offset, if$/;"	m	struct:Dimblock
binread	src/sysdep.c	/^char binread[] = "rb", textread[] = "r";$/;"	v
binwrite	src/sysdep.c	/^char binwrite[] = "wb", textwrite[] = "w";$/;"	v
bit_clear	src/f2c.h	/^#define bit_clear(/;"	d
bit_set	src/f2c.h	/^#define bit_set(/;"	d
bit_test	src/f2c.h	/^#define bit_test(/;"	d
bits	src/intr.c	/^	struct Intrpacked bits;$/;"	m	union:__anon21	typeref:struct:__anon21::Intrpacked	file:
blanks	src/defs.h	/^		ftnint blanks;$/;"	m	struct:Constant::__anon5
blkdfile	src/init.c	/^FILEP blkdfile;$/;"	v
blkdfname	src/sysdep.c	/^char *blkdfname		= "block_data";$/;"	v
blklevel	src/defs.h	/^	unsigned blklevel:8;	\/* level of nesting, for branch-in-loop$/;"	m	struct:Labelblock
blklevel	src/init.c	/^int blklevel;$/;"	v
boolean	src/parse_args.c	/^typedef int boolean;$/;"	t	file:
buf	src/lex.c	/^	char buf[COMMENT_BUF_STORE];$/;"	m	struct:comment_buf	file:
buf	src/mem.c	/^	char buf[MEMBSIZE];$/;"	m	struct:memblock	file:
builtin	src/misc.c	/^builtin(t, s, dbi)$/;"	f
byterev	src/main.c	/^flag byterev = NO;$/;"	v
c	src/f2c.h	/^	complex c;$/;"	m	union:Multitype
c_file	src/init.c	/^FILEP c_file;$/;"	v
c_functions	src/sysdep.c	/^char *c_functions	= "c_functions";$/;"	v
c_keywords	src/names.c	/^char *c_keywords[] = {$/;"	v
c_name	src/sysdep.c	/^c_name(s, ft)$/;"	f
c_output_line_length	src/format.c	/^int c_output_line_length = DEF_C_LINE_LENGTH;$/;"	v
c_type_decl	src/names.c	/^c_type_decl(type, is_extern)$/;"	f
call0	src/misc.c	/^call0(type, name)$/;"	f
call1	src/misc.c	/^call1(type, name, arg)$/;"	f
call2	src/misc.c	/^call2(type, name, arg1, arg2)$/;"	f
call3	src/misc.c	/^call3(type, name, arg1, arg2, arg3)$/;"	f
call4	src/misc.c	/^call4(type, name, arg1, arg2, arg3, arg4)$/;"	f
callbyvalue	src/intr.c	/^char *callbyvalue[ ] =$/;"	v
callk	src/misc.c	/^callk(type, name, args)$/;"	f
callk_kludge	src/misc.c	/^int callk_kludge;$/;"	v
calloc	src/malloc.c	/^calloc(n, m) Unsigned m, n;$/;"	f
can_include	src/main.c	/^int can_include = YES;	\/* so we can disable includes for netlib *\/$/;"	v
cast_args	src/intr.c	/^cast_args(maxtype, args)$/;"	f
casttypes	src/init.c	/^char *casttypes[TYSUBR+1] = {$/;"	v
cbcur	src/lex.c	/^static comment_buf *cbfirst, *cbcur;$/;"	v	file:
cbfirst	src/lex.c	/^static comment_buf *cbfirst, *cbcur;$/;"	v	file:
cbinit	src/lex.c	/^static char *cbinit, *cbnext, *cblast;$/;"	v	file:
cblast	src/lex.c	/^static char *cbinit, *cbnext, *cblast;$/;"	v	file:
cbnext	src/lex.c	/^static char *cbinit, *cbnext, *cblast;$/;"	v	file:
ccp	src/defs.h	/^#define ccp /;"	d
ccp0	src/defs.h	/^		char *ccp0;$/;"	m	struct:Constant::__anon5
ccp1	src/defs.h	/^		} ccp1;$/;"	m	union:Constant	typeref:struct:Constant::__anon5
cd	src/defs.h	/^	double cd[2];$/;"	m	union:Constant
cds	src/cds.c	/^cds(s, z0)$/;"	f
cds	src/defs.h	/^	char *cds[2];$/;"	m	struct:Literal
cds	src/defs.h	/^	char *cds[2];$/;"	m	union:Constant
cerr	src/f2c.h	/^{	flag cerr;$/;"	m	struct:__anon17
cextname	src/defs.h	/^	char *cextname;		\/* C version of external name *\/$/;"	m	struct:Extsym
ch_ar_dim	src/formatdata.c	/^ static int ch_ar_dim = -1; \/* length of each element of char string array *\/$/;"	v	file:
chainp	src/defs.h	/^typedef struct Chain *chainp;$/;"	t	typeref:struct:Chain
chains	src/init.c	/^chainp chains	= NULL;$/;"	v
changedtype	src/proc.c	/^changedtype(q)$/;"	f
changes	src/defs.h	/^	int defined, dnargs, nargs, changes;$/;"	m	struct:__anon2
charlen	src/formatdata.c	/^ static long charlen;$/;"	v	file:
charleng	src/defs.h	/^	unsigned charleng:1;	\/* so saveargtypes can get i\/o calls right *\/$/;"	m	struct:Addrblock
charptr	src/defines.h	/^typedef char *charptr;$/;"	t
charpval	src/gram.c	/^	char *charpval;$/;"	m	union:__anon20	file:
chars_per_wd	src/main.c	/^int chars_per_wd, gflag, protostatus;$/;"	v
checklogical	src/pread.c	/^#define checklogical(/;"	d	file:
checkreal	src/pread.c	/^checkreal(k)$/;"	f	file:
checksubs	src/main.c	/^flag checksubs = NO;$/;"	v
chlgslot	src/init.c	/^int chlgslot	= -1;$/;"	v
chr0fmt	src/sysdep.c	/^static char *chr0fmt[127] = {	\/*}*\/$/;"	v	file:
chr_fmt	src/sysdep.c	/^char *chr_fmt[Table_size];$/;"	v
chslot	src/init.c	/^int chslot	= -1;$/;"	v
chval	src/gram.c	/^	chainp chval;$/;"	m	union:__anon20	file:
ci	src/defs.h	/^	ftnint ci;		\/* Constant integer *\/$/;"	m	union:Constant
ciend	src/f2c.h	/^	flag ciend;$/;"	m	struct:__anon14
cierr	src/f2c.h	/^{	flag cierr;$/;"	m	struct:__anon14
cifmt	src/f2c.h	/^	char *cifmt;$/;"	m	struct:__anon14
cilist	src/f2c.h	/^} cilist;$/;"	t	typeref:struct:__anon14
cilist_names	src/io.c	/^LOCAL char *cilist_names[] = {$/;"	v
cirec	src/f2c.h	/^	ftnint cirec;$/;"	m	struct:__anon14
ciunit	src/f2c.h	/^	ftnint ciunit;$/;"	m	struct:__anon14
ckalloc	src/misc.c	/^ckalloc(n)$/;"	f
cktype	src/expr.c	/^cktype(op, lt, rt)$/;"	f
cktype1	src/exec.c	/^cktype1(p) expptr p;$/;"	f	file:
clf	src/main.c	/^clf(p, what, quit)$/;"	f
cllist	src/f2c.h	/^} cllist;$/;"	t	typeref:struct:__anon17
cllist_names	src/io.c	/^LOCAL char *cllist_names[] = {$/;"	v
cm_fmt_string	src/init.c	/^char *cm_fmt_string;		\/* Complex format string *\/$/;"	v
cmplx_sub	src/defs.h	/^	unsigned cmplx_sub:1;	\/* used in complex arithmetic under -s *\/$/;"	m	struct:Addrblock
cmpstr	src/misc.c	/^cmpstr(a, b, la, lb)$/;"	f
code	src/lex.c	/^LOCAL int code;		\/* Card type; INITIAL, CONTINUE or EOF *\/$/;"	v
comblock	src/proc.c	/^comblock(s)$/;"	f
comlen	src/pread.c	/^comlen(pf)$/;"	f	file:
comm2dcl	src/main.c	/^comm2dcl(Void)$/;"	f	file:
comm_union_name	src/names.c	/^comm_union_name(count)$/;"	f
comment_buf	src/lex.c	/^	} comment_buf;$/;"	t	typeref:struct:comment_buf	file:
comment_buf	src/lex.c	/^typedef struct comment_buf {$/;"	s	file:
comment_file	src/vax.c	/^ static FILE *comment_file;$/;"	v	file:
commlen	src/names.c	/^commlen(vl)$/;"	f
commonprotos	src/main.c	/^commonprotos(outfile)$/;"	f	file:
compare	src/sysdep.c	/^ compare(a,b)$/;"	f	file:
compgoto_out	src/output.c	/^compgoto_out(outfile, index, labels)$/;"	f
complex	src/f2c.h	/^typedef struct { real r, i; } complex;$/;"	t	typeref:struct:__anon12
complex_seen	src/main.c	/^int complex_seen, dcomplex_seen;$/;"	v
comstart	src/lex.c	/^LOCAL char comstart[Table_size];$/;"	v
consbinop	src/expr.c	/^consbinop(opcode, type, cpp, app, bpp)$/;"	f
consconv	src/expr.c	/^consconv(lt, lc, rc)$/;"	f
consnegop	src/expr.c	/^consnegop(p)$/;"	f
conspower	src/expr.c	/^conspower(p, ap, n)$/;"	f
conssgn	src/expr.c	/^conssgn(p)$/;"	f
constblock	src/defs.h	/^	struct Constblock constblock;$/;"	m	union:Expression	typeref:struct:Expression::Constblock
contmax	src/lex.c	/^contmax(Void)$/;"	f
convci	src/misc.c	/^convci(n, s)$/;"	f
convic	src/misc.c	/^convic(n)$/;"	f
copy_data	src/proc.c	/^copy_data(list)$/;"	f
copyn	src/misc.c	/^copyn(n, s)$/;"	f
copys	src/misc.c	/^copys(s)$/;"	f
count	src/parse.h	/^    int count;$/;"	m	struct:__anon23
count_args	src/vax.c	/^count_args(Void)$/;"	f	file:
coutput	src/sysdep.c	/^char *coutput		= "c_output";$/;"	v
cp	src/defs.h	/^	chainp cp;$/;"	m	struct:__anon1
cpblock	src/misc.c	/^cpblock(n, p)$/;"	f
cpd	src/output.c	/^#define cpd(/;"	d	file:
cpd	src/output.c	/^#undef cpd$/;"	d	file:
cpexpr	src/expr.c	/^cpexpr(p)$/;"	f
cplenexpr	src/expr.c	/^cplenexpr(p)$/;"	f	file:
cpn	src/misc.c	/^cpn(n, a, b)$/;"	f
cpstring	src/mem.c	/^cpstring(s)$/;"	f
cq	src/defs.h	/^	Llong cq;		\/* for TYQUAD integer *\/$/;"	m	union:Constant
cr_purge	src/xsum.c	/^cr_purge(buf, n)$/;"	f
cray	src/f2c.h	/^#undef cray$/;"	d
crunch	src/lex.c	/^crunch(Void)$/;"	f
csta	src/f2c.h	/^	char *csta;$/;"	m	struct:__anon17
ctlabels	src/defs.h	/^	int ctlabels[4];	\/* Control labels, defined below *\/$/;"	m	struct:Ctlframe
ctls	src/init.c	/^struct Ctlframe *ctls;$/;"	v	typeref:struct:Ctlframe
ctlstack	src/init.c	/^struct Ctlframe *ctlstack;$/;"	v	typeref:struct:Ctlframe
ctltype	src/defs.h	/^	unsigned ctltype:8;$/;"	m	struct:Ctlframe
cunit	src/f2c.h	/^	ftnint cunit;$/;"	m	struct:__anon17
cur_varname	src/data.c	/^static char *cur_varname;$/;"	v	file:
curdtelt	src/init.c	/^ftnint curdtelt;$/;"	v
curdtp	src/init.c	/^struct Chain *curdtp	= NULL;$/;"	v	typeref:struct:Chain
curmemblock	src/mem.c	/^ memblock *curmemblock, *firstmemblock;$/;"	v
curno	src/defs.h	/^	int curno;		\/* current number for this common block,$/;"	m	struct:Extsym
current_ftn_file	src/main.c	/^int current_ftn_file = 0;$/;"	v
cursor_pos	src/niceprintf.c	/^static int cursor_pos = 0;$/;"	v	file:
cvarname	src/defs.h	/^	char *cvarname;		\/* name in the resulting C *\/$/;"	m	struct:Nameblock
cvarname	src/defs.h	/^	char *cvarname;$/;"	m	struct:Paramblock
cxslot	src/init.c	/^int cxslot	= -1;$/;"	v
d	src/f2c.h	/^	doublereal d;$/;"	m	union:Multitype
d	src/p1output.c	/^	double d;$/;"	m	union:dL	file:
dL	src/p1output.c	/^ union dL {$/;"	u	file:
dabs	src/f2c.h	/^#define dabs(/;"	d
data_value	src/formatdata.c	/^data_value(infile, offset, type)$/;"	f
datafmt	src/data.c	/^static char datafmt[] = "%s\\t%09ld\\t%d";$/;"	v	file:
datagripe	src/gram.c	/^static int datagripe;$/;"	v	file:
dataline	src/data.c	/^dataline(varname, offset, type)$/;"	f
datalist	src/defs.h	/^	struct Chain *datalist;$/;"	m	struct:Impldoblock	typeref:struct:Impldoblock::Chain
dataname	src/data.c	/^dataname(stg, memno)$/;"	f
datap	src/defs.h	/^	char * datap;		\/* Tagged block *\/$/;"	m	struct:Chain
datastack	src/gram.c	/^static chainp datastack;$/;"	v	file:
dataval	src/data.c	/^dataval(repp, valp)$/;"	f
db_fmt_string	src/init.c	/^char *db_fmt_string;	    	\/* Double format string *\/$/;"	v
dbl_builtin	src/defs.h	/^	unsigned dbl_builtin:1;	\/* builtin to be declared double *\/$/;"	m	struct:Addrblock
dblcmplx	src/intr.c	/^	char dblcmplx;$/;"	m	struct:Intrbits	file:
dblintrno	src/intr.c	/^	char dblintrno;	\/* for -r8 *\/$/;"	m	struct:Intrbits	file:
dclerr	src/error.c	/^dclerr(s, v)$/;"	f
dcm_fmt_string	src/init.c	/^char *dcm_fmt_string;		\/* Double complex format string *\/$/;"	v
dcomplex	src/expr.c	/^typedef struct { double dreal, dimag; } dcomplex;$/;"	t	typeref:struct:__anon11	file:
dcomplex_seen	src/main.c	/^int complex_seen, dcomplex_seen;$/;"	v
debugflag	src/main.c	/^flag debugflag = NO;$/;"	v
declare_new_addr	src/names.c	/^declare_new_addr(addrp)$/;"	f
def_commons	src/names.c	/^def_commons(of)$/;"	f
def_equivs	src/main.c	/^int def_equivs = YES;$/;"	v
def_i2	src/main.c	/^static char *def_i2 = "";$/;"	v	file:
def_start	src/mem.c	/^def_start(outfile, s1, s2, post)$/;"	f
define_list	src/mem.c	/^static defines *define_list;$/;"	v	file:
defined	src/defs.h	/^	int defined, dnargs, nargs, changes;$/;"	m	struct:__anon2
defines	src/iob.h	/^struct defines {$/;"	s
defines	src/iob.h	/^typedef struct defines defines;$/;"	t	typeref:struct:defines
defname	src/iob.h	/^	char defname[1];$/;"	m	struct:defines
deregister	src/expr.c	/^deregister(np)$/;"	f
detected	src/pread.c	/^detected(msg)$/;"	f	file:
dfile	src/data.c	/^LOCAL FILEP dfile;$/;"	v
dfill	src/defs.h	/^		double dfill[2];$/;"	m	struct:Addrblock::__anon6::__anon7
dflt0proc	src/init.c	/^static char *dflt0proc[] = {$/;"	v	file:
dflt1proc	src/init.c	/^char *dflt1proc[] = { "(U_fp)0", "( ??bug?? )0", "(I1_fp)0",$/;"	v
dfltarg	src/init.c	/^char *dfltarg[] = {$/;"	v
dfltproc	src/init.c	/^char **dfltproc = dflt0proc;$/;"	v
dflttype	src/init.c	/^char dflttype[26];$/;"	v
diagfile	src/init.c	/^FILEP diagfile;$/;"	v
dim_check	src/proc.c	/^dim_check(q)$/;"	f
dim_finish	src/proc.c	/^dim_finish(v)$/;"	f	file:
dimag	src/expr.c	/^typedef struct { double dreal, dimag; } dcomplex;$/;"	m	struct:__anon11	file:
dimexpr	src/defs.h	/^		expptr dimexpr;	\/* as above in basexpr, this is an$/;"	m	struct:Dimblock::__anon8
dims	src/defs.h	/^		} dims[1];	\/* Dimblocks are allocated with enough$/;"	m	struct:Dimblock	typeref:struct:Dimblock::__anon8
dims	src/f2c.h	/^	ftnlen *dims;$/;"	m	struct:Vardesc
dims	src/gram.c	/^static struct Dims dims[MAXDIM+1];$/;"	v	typeref:struct:Dims	file:
dimsize	src/defs.h	/^		expptr dimsize;	\/* constant or register holding the size$/;"	m	struct:Dimblock::__anon8
dmax	src/f2c.h	/^#define dmax(/;"	d
dmin	src/f2c.h	/^#define dmin(/;"	d
dnargs	src/defs.h	/^	int defined, dnargs, nargs, changes;$/;"	m	struct:__anon2
dneg	src/main.c	/^int dneg = NO;			\/* f77 treatment of unary minus *\/$/;"	v
do_format	src/format.c	/^do_format(infile, outfile)$/;"	f	file:
do_init_data	src/formatdata.c	/^do_init_data(outfile, infile)$/;"	f
do_p1_1while	src/format.c	/^do_p1_1while(outfile)$/;"	f	file:
do_p1_2while	src/format.c	/^do_p1_2while(infile, outfile)$/;"	f	file:
do_p1_addr	src/format.c	/^do_p1_addr(infile, outfile)$/;"	f	file:
do_p1_asgoto	src/format.c	/^do_p1_asgoto(infile, outfile)$/;"	f	file:
do_p1_charp	src/format.c	/^do_p1_charp(infile)$/;"	f	file:
do_p1_comment	src/format.c	/^do_p1_comment(infile, outfile)$/;"	f	file:
do_p1_comp_goto	src/format.c	/^do_p1_comp_goto(infile, outfile)$/;"	f	file:
do_p1_const	src/format.c	/^do_p1_const(infile)$/;"	f	file:
do_p1_elif	src/format.c	/^do_p1_elif(infile, outfile)$/;"	f	file:
do_p1_else	src/format.c	/^do_p1_else(outfile)$/;"	f	file:
do_p1_elseifstart	src/format.c	/^do_p1_elseifstart(outfile)$/;"	f	file:
do_p1_end_for	src/format.c	/^do_p1_end_for(outfile)$/;"	f	file:
do_p1_endelse	src/format.c	/^do_p1_endelse(outfile)$/;"	f	file:
do_p1_endif	src/format.c	/^do_p1_endif(outfile)$/;"	f	file:
do_p1_expr	src/format.c	/^do_p1_expr(infile, outfile)$/;"	f	file:
do_p1_extern	src/format.c	/^do_p1_extern(infile)$/;"	f	file:
do_p1_for	src/format.c	/^do_p1_for(infile, outfile)$/;"	f	file:
do_p1_fortran	src/format.c	/^do_p1_fortran(infile, outfile)$/;"	f	file:
do_p1_goto	src/format.c	/^do_p1_goto(infile, outfile)$/;"	f	file:
do_p1_head	src/format.c	/^do_p1_head(infile, outfile)$/;"	f	file:
do_p1_ident	src/format.c	/^do_p1_ident(infile)$/;"	f	file:
do_p1_if	src/format.c	/^do_p1_if(infile, outfile)$/;"	f	file:
do_p1_label	src/format.c	/^do_p1_label(infile, outfile)$/;"	f	file:
do_p1_list	src/format.c	/^do_p1_list(infile, outfile)$/;"	f	file:
do_p1_literal	src/format.c	/^do_p1_literal(infile)$/;"	f	file:
do_p1_name_pointer	src/format.c	/^do_p1_name_pointer(infile)$/;"	f	file:
do_p1_set_line	src/format.c	/^do_p1_set_line(infile)$/;"	f	file:
do_p1_subr_ret	src/format.c	/^do_p1_subr_ret(infile, outfile)$/;"	f	file:
do_string	src/formatdata.c	/^do_string(outfile, v, nloc)$/;"	f	file:
do_uninit_equivs	src/format.c	/^do_uninit_equivs(outfile, did_one)$/;"	f
dobodylabel	src/defs.h	/^#define dobodylabel /;"	d
dobss	src/proc.c	/^dobss(Void)$/;"	f
docomleng	src/proc.c	/^docomleng(Void)$/;"	f
docommon	src/proc.c	/^docommon(Void)$/;"	f
doentry	src/proc.c	/^doentry(ep)$/;"	f
doequiv	src/equiv.c	/^doequiv(Void)$/;"	f
dofclose	src/io.c	/^dofclose(Void)$/;"	f
dofinquire	src/io.c	/^dofinquire(Void)$/;"	f
dofmove	src/io.c	/^dofmove(subname)$/;"	f
dofopen	src/io.c	/^dofopen(Void)$/;"	f
dofork	src/sysdep.c	/^dofork(fname) char *fname;$/;"	f
doin_setbound	src/init.c	/^int doin_setbound;$/;"	v
doinclude	src/lex.c	/^doinclude(name)$/;"	f
doing_stmtfcn	src/exec.c	/^int doing_stmtfcn;$/;"	v
doing_vleng	src/expr.c	/^ static int doing_vleng;$/;"	v	file:
doinit	src/defs.h	/^	expptr doinit;		\/* for use with -onetrip *\/$/;"	m	struct:Ctlframe
doio	src/io.c	/^doio(list)$/;"	f
doiolist	src/io.c	/^doiolist(p0)$/;"	f
dolabel	src/defs.h	/^	int dolabel;		\/* label marking end of this DO loop *\/$/;"	m	struct:Ctlframe
domax	src/defs.h	/^	expptr domax;		\/* constant or temp variable holding MAX$/;"	m	struct:Ctlframe
donamep	src/defs.h	/^	Namep donamep;		\/* DO index variable *\/$/;"	m	struct:Ctlframe
done	src/main.c	/^done(k)$/;"	f
doneglabel	src/defs.h	/^#define doneglabel /;"	d
donmlist	src/proc.c	/^donmlist(Void)$/;"	f
doposlabel	src/defs.h	/^#define doposlabel /;"	d
dorange	src/init.c	/^int dorange	= 0;$/;"	v
dostep	src/defs.h	/^	expptr dostep;		\/* expression *\/$/;"	m	struct:Ctlframe
dostepsign	src/defs.h	/^	unsigned dostepsign:8;	\/* 0 - variable, 1 - pos, 2 - neg *\/$/;"	m	struct:Ctlframe
dotname	src/lex.c	/^	char *dotname;$/;"	m	struct:Dotlist	file:
dots	src/lex.c	/^LOCAL struct Dotlist  dots[ ] =$/;"	v	typeref:struct:Dotlist
dotval	src/lex.c	/^	int dotval;$/;"	m	struct:Dotlist	file:
doublecomplex	src/f2c.h	/^typedef struct { doublereal r, i; } doublecomplex;$/;"	t	typeref:struct:__anon13
doublereal	src/f2c.h	/^typedef double doublereal;$/;"	t
dowhile	src/defs.h	/^	unsigned dowhile:1;$/;"	m	struct:Ctlframe
dreal	src/expr.c	/^typedef struct { double dreal, dimag; } dcomplex;$/;"	m	struct:__anon11	file:
dsort	src/sysdep.c	/^dsort(from, to)$/;"	f
dtos	src/output.c	/^dtos(x)$/;"	f
duparg	src/proc.c	/^duparg(q)$/;"	f	file:
earlylabs	src/init.c	/^chainp earlylabs;		\/* labels seen before enddcl() *\/$/;"	v
ei_first	src/init.c	/^char *ei_first, *ei_next, *ei_last;$/;"	v
ei_last	src/init.c	/^char *ei_first, *ei_next, *ei_last;$/;"	v
ei_next	src/init.c	/^char *ei_first, *ei_next, *ei_last;$/;"	v
elif_out	src/output.c	/^elif_out(outfile, expr)$/;"	f
elselabel	src/defs.h	/^#define elselabel /;"	d
enamep	src/defs.h	/^	Namep enamep;			\/* External name *\/$/;"	m	struct:Entrypoint
end_else_out	src/output.c	/^end_else_out(outfile)$/;"	f
endbit	src/io.c	/^LOCAL int endbit;$/;"	v
endcd	src/lex.c	/^LOCAL char *endcd;$/;"	v
endcheck	src/lex.c	/^endcheck(Void)$/;"	f
enddcl	src/proc.c	/^enddcl(Void)$/;"	f
enddo	src/exec.c	/^enddo(here)$/;"	f
endif_out	src/output.c	/^endif_out(outfile)$/;"	f
endio	src/io.c	/^endio(Void)$/;"	f
endioctl	src/io.c	/^endioctl(Void)$/;"	f
endlabel	src/defs.h	/^#define endlabel /;"	d
endproc	src/proc.c	/^endproc(Void)$/;"	f
entnextp	src/defs.h	/^	struct Entrypoint *entnextp;$/;"	m	struct:Entrypoint	typeref:struct:Entrypoint::Entrypoint
entries	src/init.c	/^struct Entrypoint *entries	= NULL;$/;"	v	typeref:struct:Entrypoint
entry_goto	src/proc.c	/^entry_goto(outfile)$/;"	f	file:
entryname	src/defs.h	/^	Extsym *entryname;	\/* Name of this ENTRY *\/$/;"	m	struct:Entrypoint
entrypt	src/proc.c	/^entrypt(Class, type, length, entry, args)$/;"	f
epicode	src/proc.c	/^epicode(Void)$/;"	f
eqn	src/misc.c	/^eqn(n, a, b)$/;"	f
equiv_name	src/names.c	/^equiv_name(memno, store)$/;"	f
equivs	src/defs.h	/^	struct Eqvchain *equivs;	\/* List (Eqvchain) of primblocks$/;"	m	struct:Equivblock	typeref:struct:Equivblock::Eqvchain
eqvbottom	src/defs.h	/^	long eqvbottom;$/;"	m	struct:Equivblock
eqvclass	src/init.c	/^struct Equivblock *eqvclass;$/;"	v	typeref:struct:Equivblock
eqvcommon	src/equiv.c	/^eqvcommon(p, comno, comoffset)$/;"	f
eqveqv	src/equiv.c	/^eqveqv(nvarno, ovarno, delta)$/;"	f
eqvinit	src/defs.h	/^	flag eqvinit;$/;"	m	struct:Equivblock
eqvitem	src/defs.h	/^		} eqvitem;$/;"	m	struct:Eqvchain	typeref:union:Eqvchain::__anon9
eqvleng	src/defs.h	/^#define eqvleng /;"	d
eqvlhs	src/defs.h	/^		struct Primblock *eqvlhs;$/;"	m	union:Eqvchain::__anon9	typeref:struct:Eqvchain::__anon9::Primblock
eqvmemno	src/formatdata.c	/^ static int eqvmemno;	\/* kludge *\/$/;"	v	file:
eqvname	src/defs.h	/^		Namep eqvname;$/;"	m	union:Eqvchain::__anon9
eqvnextp	src/defs.h	/^	struct Eqvchain *eqvnextp;$/;"	m	struct:Eqvchain	typeref:struct:Eqvchain::Eqvchain
eqvoffset	src/defs.h	/^	long eqvoffset;$/;"	m	struct:Eqvchain
eqvstart	src/init.c	/^int eqvstart	= 0;$/;"	v
eqvtop	src/defs.h	/^	long eqvtop;$/;"	m	struct:Equivblock
eqvtype	src/defs.h	/^	int eqvtype;$/;"	m	struct:Equivblock
eqvval	src/gram.c	/^	struct Eqvchain *eqvval;$/;"	m	union:__anon20	typeref:struct:__anon20::Eqvchain	file:
err	src/error.c	/^err(s)$/;"	f
err66	src/error.c	/^err66(s)$/;"	f
err_lineno	src/init.c	/^long err_lineno;$/;"	v
err_proc	src/error.c	/^ char *err_proc = 0;$/;"	v
errbit	src/io.c	/^LOCAL int errbit;$/;"	v
errext	src/error.c	/^errext(s)$/;"	f
erri	src/error.c	/^erri(s, t)$/;"	f
errl	src/error.c	/^errl(s, t)$/;"	f
errnode	src/expr.c	/^errnode(Void)$/;"	f
errorblock	src/defs.h	/^	struct Errorblock errorblock;$/;"	m	union:Expression	typeref:struct:Expression::Errorblock
errstr	src/error.c	/^errstr(s, t)$/;"	f
escapes	src/sysdep.c	/^char escapes[Table_size];$/;"	v
exar2	src/exec.c	/^exar2(op, e, l1, l2)$/;"	f
exarif	src/exec.c	/^exarif(expr, neglab, zerlab, poslab)$/;"	f
exasgoto	src/exec.c	/^exasgoto(labvar)$/;"	f
exassign	src/exec.c	/^exassign(vname, labelval)$/;"	f
excall	src/exec.c	/^excall(name, args, nstars, labels)$/;"	f
exdo	src/exec.c	/^exdo(range, loopname, spec)$/;"	f
execerr	src/error.c	/^execerr(s, n)$/;"	f
execlab	src/misc.c	/^execlab(stateno)$/;"	f
exelif	src/exec.c	/^exelif(p)$/;"	f
exelse	src/exec.c	/^exelse(Void)$/;"	f
exenddo	src/exec.c	/^exenddo(np)$/;"	f
exendif	src/exec.c	/^exendif()$/;"	f
exequals	src/exec.c	/^exequals(lp, rp)$/;"	f
exgoto	src/exec.c	/^exgoto(lab)$/;"	f
exif	src/exec.c	/^exif(p)$/;"	f
expcom	src/lex.c	/^LOCAL int expcom;$/;"	v
expeql	src/lex.c	/^LOCAL int expeql;$/;"	v
expptr	src/defs.h	/^typedef union Expression *expptr, *tagptr;$/;"	t	typeref:union:Expression
expr_out	src/output.c	/^expr_out(fp, e)$/;"	f
exprblock	src/defs.h	/^	struct Exprblock exprblock;$/;"	m	union:Expression	typeref:struct:Expression::Exprblock
exproto	src/defs.h	/^	unsigned exproto:1;	\/* type specified in a .P file *\/$/;"	m	struct:Extsym
expval	src/gram.c	/^	expptr expval;$/;"	m	union:__anon20	file:
exreturn	src/exec.c	/^exreturn(p)$/;"	f
exstop	src/exec.c	/^exstop(stop, p)$/;"	f
ext1comm	src/main.c	/^int extcomm, ext1comm, useauto;$/;"	v
extcomm	src/main.c	/^int extcomm, ext1comm, useauto;$/;"	v
extern_out	src/output.c	/^extern_out(fp, extsym)$/;"	f
extflag	src/intr.c	/^	char extflag;	\/* for -cd, -i90 *\/$/;"	m	struct:Intrbits	file:
extinit	src/defs.h	/^	unsigned extinit:1;	\/* Procedure has been defined,$/;"	m	struct:Extsym
extleng	src/defs.h	/^	ftnint extleng;$/;"	m	struct:Extsym
extp	src/defs.h	/^	chainp extp;		\/* List of identifiers in the common$/;"	m	struct:Extsym
extseen	src/defs.h	/^	unsigned extseen:1;	\/* True if previously referenced *\/$/;"	m	struct:Extsym
extstg	src/defs.h	/^	field extstg;		\/* STG -- should be COMMON, UNKNOWN or EXT$/;"	m	struct:Extsym
extsymtab	src/init.c	/^Extsym *extsymtab;$/;"	v
extval	src/gram.c	/^	Extsym *extval;$/;"	m	union:__anon20	file:
extype	src/defs.h	/^	unsigned extype:4;	\/* for transmitting type to output routines *\/$/;"	m	struct:Extsym
exused	src/defs.h	/^	unsigned exused:1;	\/* Has been used (for help with error msgs$/;"	m	struct:Extsym
f1	src/defs.h	/^	unsigned f1:4;$/;"	m	struct:Intrpacked
f2	src/defs.h	/^	unsigned f2:4;$/;"	m	struct:Intrpacked
f2c_entry	src/main.c	/^#define f2c_entry(/;"	d	file:
f3	src/defs.h	/^	unsigned f3:7;$/;"	m	struct:Intrpacked
f4	src/defs.h	/^	unsigned f4:1;$/;"	m	struct:Intrpacked
fatali	src/error.c	/^fatali(t, d)$/;"	f
fatalstr	src/error.c	/^fatalstr(t, s)$/;"	f
fbuf	src/lex.c	/^static char fbuf[P1_FILENAME_MAX];$/;"	v	file:
fcharp	src/defs.h	/^	expptr fcharp;			\/* first-char-index-pointer (in$/;"	m	struct:Primblock
fextname	src/defs.h	/^	char *fextname;		\/* Fortran version of external name *\/$/;"	m	struct:Extsym
ff	src/init.c	/^unsigned long ff;$/;"	v
ffilecopy	src/misc.c	/^ffilecopy(infp, outfp) FILE *infp, *outfp;$/;"	f
field	src/defines.h	/^typedef char field;	\/* actually need only 4 bits *\/$/;"	t
fields	src/iob.h	/^	char **fields;$/;"	m	struct:io_setup
fields	src/iob.h	/^	char *fields[1];$/;"	m	struct:iob_data
file_name	src/main.c	/^char *file_name, *filename0, *parens;$/;"	v
fileinit	src/init.c	/^fileinit(Void)$/;"	f
filename	src/format.c	/^char filename[P1_FILENAME_MAX];$/;"	v
filename0	src/main.c	/^char *file_name, *filename0, *parens;$/;"	v
fill_dcl	src/formatdata.c	/^fill_dcl(outfile, t, k, L) FILE *outfile; int t; int k; ftnint L;$/;"	f	file:
fill_type	src/formatdata.c	/^fill_type(L, loc, xtype) ftnint L; ftnint loc; int xtype;$/;"	f	file:
findconst	src/output.c	/^findconst(m)$/;"	f	file:
firstline	src/lex.c	/^LOCAL long firstline;$/;"	v
firstmemblock	src/mem.c	/^ memblock *curmemblock, *firstmemblock;$/;"	v
fix_entry_returns	src/proc.c	/^fix_entry_returns(Void)	\/* for multiple entry points *\/$/;"	f	file:
fixargs	src/expr.c	/^fixargs(doput, p0)$/;"	f
fixexpr	src/expr.c	/^fixexpr(p)$/;"	f
fixexttype	src/format.c	/^fixexttype(var)$/;"	f	file:
fixtype	src/expr.c	/^fixtype(p)$/;"	f
fl_fmt_string	src/init.c	/^char *fl_fmt_string;		\/* Float format string *\/$/;"	v
flag	src/defines.h	/^typedef int flag;$/;"	t
flag	src/f2c.h	/^typedef long int flag;$/;"	t
flag	src/f2c.h	/^typedef short flag;$/;"	t
flags	src/parse.h	/^    int flags;$/;"	m	struct:__anon23
flconst	src/output.c	/^flconst(buf, x)$/;"	f
flline	src/lex.c	/^flline(Void)$/;"	f
flovflo	src/sysdep.c	/^flovflo(sig)$/;"	f	file:
flush_comments	src/lex.c	/^flush_comments(Void)$/;"	f	file:
fmt_init	src/sysdep.c	/^fmt_init(Void)$/;"	f
fmtchar	src/lex.c	/^	char fmtchar;$/;"	m	struct:Fmtlist	file:
fmtlabused	src/defs.h	/^	unsigned fmtlabused:1;$/;"	m	struct:Labelblock
fmtname	src/io.c	/^fmtname(np, q)$/;"	f
fmtstmt	src/io.c	/^fmtstmt(lp)$/;"	f
fmtstring	src/defs.h	/^	char *fmtstring;	\/* format string *\/$/;"	m	struct:Labelblock
fmtval	src/lex.c	/^	int fmtval;$/;"	m	struct:Fmtlist	file:
fold	src/expr.c	/^fold(e)$/;"	f
foldminmax	src/intr.c	/^foldminmax(ismin, argsp) int ismin; struct Listblock *argsp;$/;"	f	file:
foldminmax	src/putpcc.c	/^foldminmax(op, type, p) int op; int type; chainp p;$/;"	f	file:
forcedouble	src/main.c	/^int forcedouble = YES;		\/* force real functions to double *\/$/;"	v
forcereal	src/main.c	/^int forcereal = NO;$/;"	v
format	src/output.h	/^    char *format;$/;"	m	struct:__anon22
frchain	src/misc.c	/^frchain(p)$/;"	f
frdata	src/data.c	/^frdata(p0)$/;"	f
free	src/malloc.c	/^free(f)$/;"	f
freetemps	src/proc.c	/^freetemps(Void)$/;"	f
freqchain	src/equiv.c	/^freqchain(p)$/;"	f
frexchain	src/misc.c	/^frexchain(p)$/;"	f
frexpr	src/expr.c	/^frexpr(p)$/;"	f
frrpl	src/misc.c	/^frrpl(Void)$/;"	f
frtemp	src/proc.c	/^frtemp(p)$/;"	f
ftn66flag	src/main.c	/^flag ftn66flag = NO;$/;"	v
ftn_files	src/main.c	/^char **ftn_files;$/;"	v
ftn_types	src/init.c	/^char *ftn_types[] = { "external", "??", "integer*1",$/;"	v
ftnint	src/defines.h	/^typedef long int ftnint;$/;"	t
ftnint	src/f2c.h	/^typedef long int ftnint;$/;"	t
ftnint	src/f2c.h	/^typedef short ftnint;$/;"	t
ftnlen	src/f2c.h	/^typedef long int ftnlen;$/;"	t
ftnlen	src/f2c.h	/^typedef short ftnlen;$/;"	t
fvarname	src/defs.h	/^	char *fvarname;		\/* name in the Fortran source *\/$/;"	m	struct:Nameblock
fvarname	src/defs.h	/^	char *fvarname;$/;"	m	struct:Paramblock
fwd_strcpy	src/niceprintf.c	/^fwd_strcpy(t, s)$/;"	f	file:
g	src/f2c.h	/^	integer1 g;$/;"	m	union:Multitype
gcos	src/f2c.h	/^#undef gcos$/;"	d
get_argtypes	src/putpcc.c	/^get_argtypes(p, pat0, pat1) Exprp p; Argtypes ***pat0, ***pat1;$/;"	f	file:
get_fill	src/formatdata.c	/^get_fill(dloc, loc, t0, t1, L0, L1, xtype) ftnint dloc; ftnint loc; int *t0; int *t1; ftnint *L0; ftnint *L1; int xtype;$/;"	f	file:
get_p1_token	src/format.c	/^get_p1_token(infile)$/;"	f	file:
getcd	src/lex.c	/^getcd(b, nocont)$/;"	f
getcds	src/lex.c	/^getcds(Void)$/;"	f
getkwd	src/lex.c	/^getkwd(Void)$/;"	f
gettok	src/lex.c	/^gettok(Void)$/;"	f
gflag	src/main.c	/^int chars_per_wd, gflag, protostatus;$/;"	v
gflag1	src/format.c	/^int gflag1;$/;"	v
gmem	src/mem.c	/^gmem(n, round)$/;"	f
h	src/f2c.h	/^	shortint h;$/;"	m	union:Multitype
h0align	src/main.c	/^static int h0align = 0;$/;"	v	file:
halign	src/main.c	/^char *halign, *ohalign;$/;"	v
hashclear	src/init.c	/^hashclear(Void)	\/* clear hash table *\/$/;"	f
hashtab	src/init.c	/^struct Hashentry *hashtab;$/;"	v	typeref:struct:Hashentry
hashval	src/defs.h	/^	int hashval;$/;"	m	struct:Hashentry
headblock	src/defs.h	/^	struct Headblock headblock;$/;"	m	union:Expression	typeref:struct:Expression::Headblock
headerdone	src/init.c	/^flag headerdone	= NO;$/;"	v
help	src/main.c	/^static int help, showver, skipC, skipversion;$/;"	v	file:
hexcheck	src/lex.c	/^hexcheck(key)$/;"	f
hextoi	src/defs.h	/^#define hextoi(/;"	d
hextoi_tab	src/init.c	/^unsigned char hextoi_tab[Table_size], Letters[Table_size];$/;"	v
highlabtab	src/init.c	/^struct Labelblock *highlabtab;$/;"	v	typeref:struct:Labelblock
highregvar	src/init.c	/^int highregvar;$/;"	v
holdtemps	src/init.c	/^chainp holdtemps;$/;"	v
hookup	src/misc.c	/^hookup(x, y)$/;"	f
hsize	src/main.c	/^int hsize;	\/* for padding under -h *\/$/;"	v
htype	src/main.c	/^int htype;	\/* for wr_equiv_init under -h *\/$/;"	v
i	src/f2c.h	/^	integer i;$/;"	m	union:Multitype
i	src/f2c.h	/^typedef struct { doublereal r, i; } doublecomplex;$/;"	m	struct:__anon13
i	src/f2c.h	/^typedef struct { real r, i; } complex;$/;"	m	struct:__anon12
iarrlen	src/proc.c	/^iarrlen(q)$/;"	f
iciend	src/f2c.h	/^	flag iciend;$/;"	m	struct:__anon15
icierr	src/f2c.h	/^{	flag icierr;$/;"	m	struct:__anon15
icifmt	src/f2c.h	/^	char *icifmt;$/;"	m	struct:__anon15
icilist	src/f2c.h	/^} icilist;$/;"	t	typeref:struct:__anon15
icilist_names	src/io.c	/^LOCAL char *icilist_names[] = {$/;"	v
icirlen	src/f2c.h	/^	ftnint icirlen;$/;"	m	struct:__anon15
icirnum	src/f2c.h	/^	ftnint icirnum;$/;"	m	struct:__anon15
iciunit	src/f2c.h	/^	char *iciunit;$/;"	m	struct:__anon15
ident	src/defs.h	/^	    char ident[IDENT_LEN + 1];	\/* C string form of identifier *\/$/;"	m	union:Addrblock::__anon6
ignore_cr	src/xsum.c	/^ static int ignore_cr;$/;"	v	file:
ijunk	src/intr.c	/^	int ijunk;$/;"	m	union:__anon21	file:
imagpart	src/put.c	/^imagpart(p)$/;"	f
impdiff	src/defs.h	/^	ftnint impdiff;$/;"	m	struct:Impldoblock
impdospec	src/defs.h	/^	chainp impdospec;$/;"	m	struct:Impldoblock
implb	src/defs.h	/^	expptr implb;$/;"	m	struct:Impldoblock
impldcl	src/expr.c	/^impldcl(p)$/;"	f
impldoblock	src/defs.h	/^	struct Impldoblock impldoblock;$/;"	m	union:Expression	typeref:struct:Expression::Impldoblock
implim	src/defs.h	/^	ftnint implim;$/;"	m	struct:Impldoblock
implleng	src/init.c	/^ftnint implleng[26];$/;"	v
implstg	src/init.c	/^int implstg[26];$/;"	v
impltype	src/init.c	/^int impltype[26];$/;"	v
impstep	src/defs.h	/^	expptr impstep;$/;"	m	struct:Impldoblock
impub	src/defs.h	/^	expptr impub;$/;"	m	struct:Impldoblock
in_comment	src/niceprintf.c	/^int in_comment = 0;$/;"	v
in_define	src/niceprintf.c	/^int in_define = 0;$/;"	v
in_vector	src/misc.c	/^in_vector(str, keywds, n)$/;"	f
inacc	src/f2c.h	/^	char	*inacc;$/;"	m	struct:__anon19
inacclen	src/f2c.h	/^	ftnlen	inacclen;$/;"	m	struct:__anon19
inblank	src/f2c.h	/^	char	*inblank;$/;"	m	struct:__anon19
inblanklen	src/f2c.h	/^	ftnlen	inblanklen;$/;"	m	struct:__anon19
inclcode	src/lex.c	/^	int inclcode;$/;"	m	struct:Inclfile	file:
inclfp	src/lex.c	/^	FILEP inclfp;$/;"	m	struct:Inclfile	file:
incllen	src/lex.c	/^	int incllen;$/;"	m	struct:Inclfile	file:
incllinp	src/lex.c	/^	char *incllinp;$/;"	m	struct:Inclfile	file:
incllno	src/lex.c	/^	int incllno;$/;"	m	struct:Inclfile	file:
inclname	src/lex.c	/^	char *inclname;$/;"	m	struct:Inclfile	file:
inclnext	src/lex.c	/^	struct Inclfile *inclnext;$/;"	m	struct:Inclfile	typeref:struct:Inclfile::Inclfile	file:
inclp	src/lex.c	/^LOCAL struct Inclfile *inclp	=  NULL;$/;"	v	typeref:struct:Inclfile
inclstno	src/lex.c	/^	ftnint inclstno;$/;"	m	struct:Inclfile	file:
incomm	src/proc.c	/^incomm(c, v)$/;"	f
inconsist	src/putpcc.c	/^ static char inconsist[] = "inconsistent calling sequences for ";$/;"	v	file:
ind_printf	src/niceprintf.c	/^ ind_printf (use_indent, fp, a, b, c, d, e, f, g)$/;"	f	file:
indent	src/niceprintf.c	/^int indent = 0;$/;"	v
indir	src/f2c.h	/^	char 	*indir;$/;"	m	struct:__anon19
indirlen	src/f2c.h	/^	ftnlen	indirlen;$/;"	m	struct:__anon19
inerr	src/f2c.h	/^{	flag inerr;$/;"	m	struct:__anon19
inex	src/f2c.h	/^	ftnint	*inex;	\/*parameters in standard's order*\/$/;"	m	struct:__anon19
inferdcl	src/expr.c	/^inferdcl(np, type)$/;"	f
infertypes	src/main.c	/^int infertypes = 1;$/;"	v
infile	src/f2c.h	/^	char *infile;$/;"	m	struct:__anon19
infile	src/init.c	/^FILEP infile;$/;"	v
infilen	src/f2c.h	/^	ftnlen infilen;$/;"	m	struct:__anon19
infmt	src/f2c.h	/^	char	*infmt;$/;"	m	struct:__anon19
infmtlen	src/f2c.h	/^	ftnlen	infmtlen;$/;"	m	struct:__anon19
infname	src/init.c	/^char *infname;$/;"	v
infname1	src/lex.c	/^LOCAL char *infname1, *infname2, *laststb, *stb0;$/;"	v
infname2	src/lex.c	/^LOCAL char *infname1, *infname2, *laststb, *stb0;$/;"	v
inform	src/f2c.h	/^	char	*inform;$/;"	m	struct:__anon19
informlen	src/f2c.h	/^	ftnint	informlen;$/;"	m	struct:__anon19
inilex	src/lex.c	/^inilex(name)$/;"	f
inioctl	src/init.c	/^flag inioctl;$/;"	v
init_ac	src/init.c	/^int init_ac[TYSUBR+1] = { 0,0,0,0,0,0,0,$/;"	v
init_store	src/parse_args.c	/^init_store(table, entries)$/;"	f
initbname	src/sysdep.c	/^char *initbname		= "raw_data.b";$/;"	v
initfile	src/init.c	/^FILEP initfile;$/;"	v
initfname	src/sysdep.c	/^char *initfname		= "raw_data";$/;"	v
initkey	src/lex.c	/^initkey(Void)$/;"	f
inlist	src/f2c.h	/^} inlist;$/;"	t	typeref:struct:__anon19
inlist_names	src/io.c	/^LOCAL char *inlist_names[] = {$/;"	v
inname	src/f2c.h	/^	char	*inname;$/;"	m	struct:__anon19
innamed	src/f2c.h	/^	ftnint	*innamed;$/;"	m	struct:__anon19
innamlen	src/f2c.h	/^	ftnlen	innamlen;$/;"	m	struct:__anon19
innrec	src/f2c.h	/^	ftnint	*innrec;$/;"	m	struct:__anon19
innum	src/f2c.h	/^	ftnint	*innum;$/;"	m	struct:__anon19
inopen	src/f2c.h	/^	ftnint	*inopen;$/;"	m	struct:__anon19
inqmask	src/main.c	/^int inqmask = M(TYLONG)|M(TYLOGICAL);$/;"	v
inrecl	src/f2c.h	/^	ftnint	*inrecl;$/;"	m	struct:__anon19
inregister	src/expr.c	/^inregister(np)$/;"	f
inseq	src/f2c.h	/^	char	*inseq;$/;"	m	struct:__anon19
inseqlen	src/f2c.h	/^	ftnlen	inseqlen;$/;"	m	struct:__anon19
int_trunc	src/misc.c	/^int_trunc(n0, s0) int n0; char *s0;$/;"	f	file:
intdouble	src/putpcc.c	/^intdouble(p)$/;"	f
integer	src/f2c.h	/^typedef long int integer;$/;"	t
integer1	src/f2c.h	/^typedef char integer1;$/;"	t
intonly	src/lex.c	/^flag intonly;$/;"	v
intovfl	src/expr.c	/^intovfl(Void)$/;"	f	file:
intr_omit	src/main.c	/^int intr_omit;$/;"	v
intraddr	src/intr.c	/^intraddr(np)$/;"	f
intrcall	src/intr.c	/^intrcall(np, argsp, nargs)$/;"	f
intrdesc	src/defs.h	/^		struct Intrpacked intrdesc;	\/* bits for intrinsic function*\/$/;"	m	union:Nameblock::__anon3	typeref:struct:Nameblock::__anon3::Intrpacked
intrfname	src/intr.c	/^	char intrfname[8];$/;"	m	struct:Intrblock	file:
intrfunct	src/intr.c	/^intrfunct(s)$/;"	f
intrgroup	src/intr.c	/^	char intrgroup \/* :3 *\/;$/;"	m	struct:Intrbits	file:
intrno	src/intr.c	/^	char intrno \/* :7 *\/;$/;"	m	struct:Intrbits	file:
intrstuff	src/intr.c	/^	char intrstuff \/* result type or number of generics *\/;$/;"	m	struct:Intrbits	file:
intrtab	src/intr.c	/^	} intrtab[ ] =$/;"	v	typeref:struct:Intrblock
intrval	src/intr.c	/^	struct Intrbits intrval;$/;"	m	struct:Intrblock	typeref:struct:Intrblock::Intrbits	file:
inunf	src/f2c.h	/^	char	*inunf;$/;"	m	struct:__anon19
inunflen	src/f2c.h	/^	ftnlen	inunflen;$/;"	m	struct:__anon19
inunit	src/f2c.h	/^	ftnint inunit;$/;"	m	struct:__anon19
io_fields	src/io.c	/^LOCAL char **io_fields;$/;"	v
io_setup	src/iob.h	/^struct io_setup {$/;"	s
io_setup	src/iob.h	/^typedef struct io_setup io_setup;$/;"	t	typeref:struct:io_setup
io_structs	src/io.c	/^Addrp io_structs[9];$/;"	v
io_stuff	src/io.c	/^LOCAL io_setup io_stuff[] = {$/;"	v
iob_data	src/iob.h	/^struct iob_data {$/;"	s
iob_data	src/iob.h	/^typedef struct iob_data iob_data;$/;"	t	typeref:struct:iob_data
iob_list	src/io.c	/^iob_data *iob_list;$/;"	v
ioblkp	src/io.c	/^Addrp ioblkp;$/;"	v
ioc	src/io.c	/^ioc[ ] =$/;"	v	typeref:struct:Ioclist
iocalladdr	src/io.c	/^ int iocalladdr = TYADDR;	\/* for fixing TYADDR in saveargtypes *\/$/;"	v
ioclause	src/io.c	/^ioclause(n, p)$/;"	f
iocname	src/io.c	/^	char *iocname;$/;"	m	struct:Ioclist	file:
iocname	src/io.c	/^iocname(Void)$/;"	f
iocval	src/io.c	/^	expptr iocval;$/;"	m	struct:Ioclist	file:
ioendlab	src/io.c	/^LOCAL long ioendlab;$/;"	v
ioerrlab	src/io.c	/^LOCAL long ioerrlab;$/;"	v
ioformatted	src/io.c	/^LOCAL int ioformatted;$/;"	v
ioroutine	src/io.c	/^LOCAL char ioroutine[12];$/;"	v
ioset	src/io.c	/^ioset(type, offset, p)$/;"	f
ioset_assign	src/io.c	/^static int ioset_assign = OPASSIGN;$/;"	v	file:
ioseta	src/io.c	/^ioseta(offset, p)$/;"	f
iosetc	src/io.c	/^iosetc(offset, p)$/;"	f
iosetip	src/io.c	/^iosetip(i, offset)$/;"	f
iosetlc	src/io.c	/^iosetlc(i, offp, offl)$/;"	f
iostmt	src/init.c	/^int iostmt;$/;"	v
iotype	src/io.c	/^	int iotype;$/;"	m	struct:Ioclist	file:
is_binary_op	src/output.h	/^#define is_binary_op(/;"	d
is_left_assoc	src/output.h	/^#define is_left_assoc(/;"	d
is_negatable	src/misc.c	/^is_negatable(Const)$/;"	f
is_right_assoc	src/output.h	/^#define is_right_assoc(/;"	d
is_unary_op	src/output.h	/^#define is_unary_op(/;"	d
isactive	src/defs.h	/^	unsigned isactive:1;$/;"	m	struct:Impldoblock
isaddr	src/misc.c	/^isaddr(p)$/;"	f
isalnum_	src/lex.c	/^#define isalnum_(/;"	d	file:
isalpha_	src/lex.c	/^#define isalpha_(/;"	d	file:
isarray	src/defs.h	/^	unsigned isarray:1;	\/* used to show that memoffset is$/;"	m	struct:Addrblock
isbusy	src/defs.h	/^	unsigned isbusy:1;$/;"	m	struct:Impldoblock
isident	src/niceprintf.c	/^#define isident(/;"	d	file:
isnegative_const	src/misc.c	/^isnegative_const(cp)$/;"	f
isntident	src/niceprintf.c	/^#define isntident(/;"	d	file:
isstatic	src/misc.c	/^isstatic(p)$/;"	f
istemp	src/defs.h	/^	unsigned istemp:1;	\/* used in stack management of temporary$/;"	m	struct:Addrblock
iswhite	src/formatdata.c	/^#define iswhite(/;"	d	file:
ival	src/gram.c	/^	int ival;$/;"	m	union:__anon20	file:
jumplab	src/io.c	/^LOCAL long jumplab;$/;"	v
keepsubs	src/main.c	/^flag keepsubs = NO;$/;"	v
keyend	src/lex.c	/^LOCAL struct Keylist *keystart[26], *keyend[26];$/;"	v	typeref:struct:
keyname	src/lex.c	/^	char *keyname;$/;"	m	struct:Keylist	file:
keys	src/lex.c	/^LOCAL struct Keylist  keys[ ] =$/;"	v	typeref:struct:Keylist
keystart	src/lex.c	/^LOCAL struct Keylist *keystart[26], *keyend[26];$/;"	v	typeref:struct:Keylist
keyval	src/lex.c	/^	int keyval;$/;"	m	struct:Keylist	file:
killed	src/sysdep.c	/^killed(sig)$/;"	f	file:
kludge	src/defs.h	/^		} kludge;	\/* so we can distinguish string vs binary$/;"	m	union:Addrblock::__anon6	typeref:struct:Addrblock::__anon6::__anon7
krparens	src/main.c	/^int krparens = NO;$/;"	v
krput	src/putpcc.c	/^krput(p)$/;"	f	file:
labarray	src/init.c	/^struct Labelblock **labarray;$/;"	v	typeref:struct:Labelblock
labdefined	src/defs.h	/^	unsigned labdefined:1;	\/* YES or NO *\/$/;"	m	struct:Labelblock
labelno	src/defs.h	/^	int labelno;		\/* Internal label *\/$/;"	m	struct:Labelblock
labeltab	src/init.c	/^struct Labelblock *labeltab;$/;"	v	typeref:struct:Labelblock
labinacc	src/defs.h	/^	unsigned labinacc:1;	\/* inaccessible? (i.e. has its scope$/;"	m	struct:Labelblock
labtabend	src/init.c	/^struct Labelblock *labtabend;$/;"	v	typeref:struct:Labelblock
labtype	src/defs.h	/^	unsigned labtype:2;	\/* LAB{FORMAT,EXEC,etc} *\/$/;"	m	struct:Labelblock
labused	src/defs.h	/^	unsigned labused:1;$/;"	m	struct:Labelblock
labval	src/gram.c	/^	struct Labelblock *labval;$/;"	m	union:__anon20	typeref:struct:__anon20::Labelblock	file:
last	src/lex.c	/^	char *last;$/;"	m	struct:comment_buf	file:
last_was_label	src/format.c	/^int last_was_label;	\/* Boolean used to generate semicolons$/;"	v
last_was_newline	src/niceprintf.c	/^static int last_was_newline = 0;$/;"	v	file:
lastargslot	src/init.c	/^int lastargslot;$/;"	v
lastch	src/lex.c	/^LOCAL char *lastch;$/;"	v
lastctl	src/init.c	/^struct Ctlframe *lastctl;$/;"	v	typeref:struct:Ctlframe
lastext	src/init.c	/^Extsym *lastext;$/;"	v
lastfile	src/lex.c	/^static char *lastfile = "??", *lastfile0 = "?";$/;"	v	file:
lastfile0	src/lex.c	/^static char *lastfile = "??", *lastfile0 = "?";$/;"	v	file:
lasthash	src/init.c	/^struct Hashentry *lasthash;$/;"	v	typeref:struct:Hashentry
lastiolabno	src/init.c	/^long lastiolabno;$/;"	v
lastlabno	src/init.c	/^long lastlabno;$/;"	v
lastline	src/lex.c	/^static long lastline;$/;"	v	file:
laststb	src/lex.c	/^LOCAL char *infname1, *infname2, *laststb, *stb0;$/;"	v
laststfcn	src/exec.c	/^long laststfcn = -1, thisstno;$/;"	v
lastvarno	src/init.c	/^int lastvarno;$/;"	v
lastwasbranch	src/gram.c	/^int lastwasbranch = NO;$/;"	v
lb	src/defs.h	/^struct Dims { expptr lb, ub; };$/;"	m	struct:Dims
lcharp	src/defs.h	/^	expptr lcharp;			\/* last-char-index-pointer (in$/;"	m	struct:Primblock
leftp	src/defs.h	/^	expptr leftp;$/;"	m	struct:Exprblock
len	src/malloc.c	/^	Unsigned len;$/;"	m	struct:mem	file:
lencat	src/put.c	/^lencat(p)$/;"	f
length_comp	src/format.c	/^length_comp(e, add_n)$/;"	f
lengtype	src/proc.c	/^lengtype(type, len)$/;"	f
letter	src/defs.h	/^#define letter(/;"	d
lexline	src/lex.c	/^lexline(n)$/;"	f
lexstate	src/lex.c	/^LOCAL int lexstate	= NEWSTMT;$/;"	v
lineno	src/init.c	/^long lineno;			\/* Current line in the input file, NOT the$/;"	v
linestart	src/lex.c	/^static char **linestart;$/;"	v	file:
link_msg	src/sysdep.c	/^char link_msg[]	= "on Microsoft Windows system, link with libf2c.lib;\\n\\$/;"	v
list_arg_types	src/format.c	/^list_arg_types(outfile, entryp, lengths, add_n_, finalnl)$/;"	f
list_decls	src/format.c	/^list_decls(outfile)$/;"	f
list_init_data	src/formatdata.c	/^list_init_data(Infile, Inname, outfile)$/;"	f
listargs	src/format.c	/^listargs(outfile, entryp, add_n_, lengths)$/;"	f
listblock	src/defs.h	/^	struct Listblock listblock;$/;"	m	union:Expression	typeref:struct:Expression::Listblock
listp	src/defs.h	/^	chainp listp;$/;"	m	struct:Listblock
lit_name	src/names.c	/^lit_name(litp)$/;"	f
litdval	src/defs.h	/^		double litdval[2];$/;"	m	union:Literal::__anon10
litival	src/defs.h	/^		ftnint litival;$/;"	m	union:Literal::__anon10
litival2	src/defs.h	/^		ftnint litival2[2];	\/* length, nblanks for strings *\/$/;"	m	union:Literal::__anon10
litnum	src/defs.h	/^	long litnum;			\/* numeric part of the assembler$/;"	m	struct:Literal
litpool	src/init.c	/^struct Literal *litpool;$/;"	v	typeref:struct:Literal
litqval	src/defs.h	/^		Llong litqval;$/;"	m	union:Literal::__anon10
littype	src/defs.h	/^	short littype;$/;"	m	struct:Literal
lituse	src/defs.h	/^	short lituse;		\/* usage count *\/$/;"	m	struct:Literal
litval	src/defs.h	/^		} litval;$/;"	m	struct:Literal	typeref:union:Literal::__anon10
lmax	src/misc.c	/^lmax(a, b)$/;"	f
lmin	src/misc.c	/^lmin(a, b)$/;"	f
log_2	src/misc.c	/^log_2(n)$/;"	f
logical	src/f2c.h	/^typedef long int logical;$/;"	t
logical1	src/f2c.h	/^typedef char logical1;$/;"	t
longint	src/f2c.h	/^typedef long long longint;		\/* system-dependent *\/$/;"	t
loopname	src/defs.h	/^	Namep loopname;$/;"	m	struct:Ctlframe
lower_string	src/parse_args.c	/^lower_string(dest, src)$/;"	f	file:
lval	src/gram.c	/^	ftnint lval;$/;"	m	union:__anon20	file:
main	src/main.c	/^main(argc, argv)$/;"	f
main	src/sysdeptest.c	/^main(argc, argv) int argc; char **argv;$/;"	f
main	src/xsum.c	/^main(argc, argv)$/;"	f
main_alias	src/init.c	/^char main_alias[52];		\/* PROGRAM name, if any is given *\/$/;"	v
make_int_expr	src/vax.c	/^make_int_expr(e)$/;"	f
make_one_const	src/formatdata.c	/^make_one_const(type, storage, values)$/;"	f	file:
make_param	src/data.c	/^make_param(p, e)$/;"	f
malloc	src/malloc.c	/^malloc(size)$/;"	f
many	src/error.c	/^many(s, c, n)$/;"	f
margin_printf	src/niceprintf.c	/^ margin_printf (fp, a, b, c, d, e, f, g)$/;"	f
margin_printf	src/niceprintf.c	/^ margin_printf(FILE *fp, const char *fmt, ...)$/;"	f
match	src/parse_args.c	/^match(norm_input, low_input, entry, use_prefix)$/;"	f	file:
match_table	src/parse_args.c	/^match_table(norm_input, table, entries, use_prefix, length)$/;"	f
max	src/f2c.h	/^#define max(/;"	d
max_line_len	src/niceprintf.c	/^#define  max_line_len /;"	d	file:
maxcont	src/lex.c	/^LOCAL int maxcont;$/;"	v
maxcontin	src/main.c	/^int maxcontin = MAXCONTIN;$/;"	v
maxctl	src/main.c	/^int maxctl = MAXCTL;$/;"	v
maxdim	src/init.c	/^int maxdim	= MAXDIM;$/;"	v
maxequiv	src/main.c	/^int maxequiv = MAXEQUIV;$/;"	v
maxext	src/main.c	/^int maxext = MAXEXT;$/;"	v
maxhash	src/main.c	/^int maxhash = MAXHASH;$/;"	v
maxlablist	src/main.c	/^int maxlablist = MAXLABLIST;$/;"	v
maxleng	src/defs.h	/^	ftnint maxleng;$/;"	m	struct:Extsym
maxliterals	src/main.c	/^int maxliterals = MAXLITERALS;$/;"	v
maxno	src/defs.h	/^	int maxno;		\/* highest curno value for this common block *\/$/;"	m	struct:Extsym
maxregvar	src/main.c	/^int maxregvar = MAXREGVAR;	\/* if maxregvar > MAXREGVAR, error *\/$/;"	v
maxstno	src/main.c	/^int maxstno = MAXSTNO;$/;"	v
maxtoklen	src/init.c	/^int maxtoklen, toklen;$/;"	v
maxtype	src/misc.c	/^maxtype(t1, t2)$/;"	f
mc68010	src/f2c.h	/^#undef mc68010$/;"	d
mc68020	src/f2c.h	/^#undef mc68020$/;"	d
mem	src/malloc.c	/^	} mem;$/;"	t	typeref:struct:mem	file:
mem	src/malloc.c	/^typedef struct mem {$/;"	s	file:
mem	src/mem.c	/^mem(n, round)$/;"	f
mem0	src/mem.c	/^ static memblock *mem0;$/;"	v	file:
mem0_last	src/mem.c	/^ char *mem_first, *mem_next, *mem_last, *mem0_last;$/;"	v
mem_first	src/mem.c	/^ char *mem_first, *mem_next, *mem_last, *mem0_last;$/;"	v
mem_init	src/mem.c	/^mem_init(Void)$/;"	f
mem_last	src/mem.c	/^ char *mem_first, *mem_next, *mem_last, *mem0_last;$/;"	v
mem_next	src/mem.c	/^ char *mem_first, *mem_next, *mem_last, *mem0_last;$/;"	v
memblock	src/mem.c	/^ struct memblock {$/;"	s	file:
memblock	src/mem.c	/^ typedef struct memblock memblock;$/;"	t	typeref:struct:memblock	file:
memcmp	src/memset.c	/^memcmp(s1, s2, n) char *s1, *s2; int n;$/;"	f
memcpy	src/memset.c	/^memcpy(s1, s2, n) char *s1, *s2; int n;$/;"	f
memname	src/vax.c	/^memname(stg, mem)$/;"	f
memno	src/defs.h	/^	long memno;		\/* when vstg == STGCONST, this is the$/;"	m	struct:Addrblock
memno2info	src/formatdata.c	/^memno2info(memno, info)$/;"	f	file:
memoffset	src/defs.h	/^	expptr memoffset;	\/* used in subscript computations, usually *\/$/;"	m	struct:Addrblock
memset	src/memset.c	/^memset(s, c, n) char *s; int c, n;$/;"	f
memversion	src/expr.c	/^memversion(np)$/;"	f
min	src/f2c.h	/^#define min(/;"	d
mips	src/f2c.h	/^#undef mips$/;"	d
mixed_type	src/exec.c	/^mixed_type(np)$/;"	f	file:
mkaddcon	src/expr.c	/^mkaddcon(l)$/;"	f
mkaddr	src/expr.c	/^mkaddr(p)$/;"	f
mkarg	src/expr.c	/^mkarg(type, argno)$/;"	f
mkbitcon	src/expr.c	/^mkbitcon(shift, leng, s)$/;"	f
mkchain	src/misc.c	/^mkchain(p, q)$/;"	f
mkconst	src/expr.c	/^mkconst(t)$/;"	f
mkconv	src/expr.c	/^mkconv(t, p)$/;"	f
mkcxcon	src/expr.c	/^mkcxcon(realp, imagp)$/;"	f
mkexpr	src/expr.c	/^mkexpr(opcode, lp, rp)$/;"	f
mkext	src/misc.c	/^mkext(f, s)$/;"	f
mkext1	src/misc.c	/^mkext1(f, s)$/;"	f
mkfield	src/put.c	/^mkfield(res, f, ty)$/;"	f
mkfunct	src/expr.c	/^mkfunct(p0)$/;"	f
mkintcon	src/expr.c	/^mkintcon(l)$/;"	f
mkintqcon	src/misc.c	/^mkintqcon(n, s) int n; char *s;$/;"	f
mkiodo	src/misc.c	/^mkiodo(dospec, list)$/;"	f
mklabel	src/misc.c	/^mklabel(l)$/;"	f
mklhs	src/expr.c	/^mklhs(p, subkeep)$/;"	f
mklist	src/misc.c	/^mklist(p)$/;"	f
mklogcon	src/expr.c	/^mklogcon(l)$/;"	f
mkname	src/misc.c	/^mkname(s)$/;"	f
mkplace	src/expr.c	/^mkplace(np)$/;"	f
mkpower	src/expr.c	/^mkpower(p)$/;"	f
mkprim	src/expr.c	/^mkprim(v0, args, substr)$/;"	f
mkrealcon	src/expr.c	/^mkrealcon(t, d)$/;"	f
mkscalar	src/expr.c	/^mkscalar(np)$/;"	f
mkstfunct	src/exec.c	/^mkstfunct(lp, rp)$/;"	f
mkstrcon	src/expr.c	/^mkstrcon(l, v)$/;"	f
mktmp	src/proc.c	/^mktmp(type, lengp)$/;"	f
mktmp0	src/proc.c	/^mktmp0(type, lengp)$/;"	f
mktmpn	src/proc.c	/^mktmpn(nelt, type, lengp)$/;"	f
multitype	src/init.c	/^flag multitype;$/;"	v
n_elt	src/format.c	/^n_elt(vd) struct Dimblock *vd;$/;"	f	file:
n_keywords	src/names.c	/^int n_keywords = sizeof(c_keywords)\/sizeof(char *);$/;"	v
nallargs	src/init.c	/^int nallargs;$/;"	v
nallchargs	src/init.c	/^int nallchargs;$/;"	v
name	src/defs.h	/^	    Namep name;		\/* contains a pointer into the hash table *\/$/;"	m	union:Addrblock::__anon6
name	src/f2c.h	/^	char *name;$/;"	m	struct:Namelist
name	src/f2c.h	/^	char *name;$/;"	m	struct:Vardesc
name	src/iob.h	/^	char *name;$/;"	m	struct:iob_data
nameblock	src/defs.h	/^	struct Nameblock nameblock;$/;"	m	union:Expression	typeref:struct:Expression::Nameblock
namelist	src/defs.h	/^		chainp namelist;	\/* points to names in the NAMELIST,$/;"	m	union:Nameblock::__anon4
namelist	src/proc.c	/^namelist(np)$/;"	f
namep	src/defs.h	/^	Namep namep;			\/* Pointer to structure Nameblock *\/$/;"	m	struct:Primblock
namval	src/gram.c	/^	struct Nameblock *namval;$/;"	m	union:__anon20	typeref:struct:__anon20::Nameblock	file:
nargs	src/defs.h	/^	int defined, dnargs, nargs, changes;$/;"	m	struct:__anon2
nargs	src/intr.c	/^	char nargs;		\/* Number of arguments *\/$/;"	m	struct:Specblock	file:
ncat	src/put.c	/^ncat(p)$/;"	f
ncont	src/lex.c	/^LOCAL int ncont;$/;"	v
ndim	src/defs.h	/^	int ndim;$/;"	m	struct:Dimblock
ndim	src/gram.c	/^static int ndim;$/;"	v	file:
needkwd	src/init.c	/^int needkwd;$/;"	v
needwkey	src/lex.c	/^static int needwkey;$/;"	v	file:
negate_const	src/misc.c	/^negate_const(cp)$/;"	f
nelt	src/defs.h	/^	expptr nelt;		\/* This is NULL if the array is unbounded *\/$/;"	m	struct:Dimblock
nelt	src/iob.h	/^	int nelt, type;$/;"	m	struct:io_setup
nentry	src/init.c	/^int nentry;$/;"	v
nequiv	src/init.c	/^int nequiv	= 0;$/;"	v
nerr	src/init.c	/^int nerr;$/;"	v
new_arg_length	src/names.c	/^new_arg_length(arg)$/;"	f
new_dcl	src/gram.c	/^int new_dcl;$/;"	v
new_endif	src/exec.c	/^new_endif()$/;"	f
new_func_length	src/names.c	/^new_func_length(Void)$/;"	f
new_iob_data	src/mem.c	/^new_iob_data(ios, name)$/;"	f
new_procs	src/proc.c	/^ chainp new_procs;$/;"	v
new_vars	src/init.c	/^chainp new_vars = CHNULL;	\/* List of newly created locals in this$/;"	v
newarg	src/pread.c	/^newarg(ftype, p)$/;"	f	file:
newentry	src/proc.c	/^newentry(v, substmsg)$/;"	f
newiolabel	src/io.c	/^newiolabel(Void) {$/;"	f	file:
newlabel	src/misc.c	/^newlabel(Void)$/;"	f
newproc	src/proc.c	/^newproc(Void)$/;"	f
next	src/iob.h	/^	struct defines *next;$/;"	m	struct:defines	typeref:struct:defines::defines
next	src/iob.h	/^	struct iob_data *next;$/;"	m	struct:iob_data	typeref:struct:iob_data::iob_data
next	src/lex.c	/^	struct comment_buf *next;$/;"	m	struct:comment_buf	typeref:struct:comment_buf::comment_buf	file:
next	src/malloc.c	/^	struct mem *next;$/;"	m	struct:mem	typeref:struct:mem::mem	file:
next	src/mem.c	/^	struct memblock *next;$/;"	m	struct:memblock	typeref:struct:memblock::memblock	file:
next_slot	src/niceprintf.c	/^static char *next_slot;$/;"	v	file:
next_tab	src/niceprintf.h	/^#define next_tab(/;"	d
nextarg	src/proc.c	/^nextarg(type)$/;"	f
nextcd	src/lex.c	/^LOCAL char *nextcd 	= NULL;$/;"	v
nextch	src/lex.c	/^LOCAL char *nextch;$/;"	v
nextdata	src/data.c	/^nextdata(elenp)$/;"	f
nextext	src/init.c	/^Extsym *nextext;$/;"	v
nextp	src/defs.h	/^	chainp nextp;$/;"	m	struct:Chain
nice_printf	src/niceprintf.c	/^ nice_printf (fp, a, b, c, d, e, f, g)$/;"	f
nice_printf	src/niceprintf.c	/^ nice_printf(FILE *fp, const char *fmt, ...)$/;"	f
nincl	src/lex.c	/^LOCAL int nincl	= 0;	\/* Current number of include files *\/$/;"	v
nintnames	src/init.c	/^int nintnames	= 0;$/;"	v
nioctl	src/init.c	/^int nioctl;$/;"	v
nliterals	src/init.c	/^int nliterals;$/;"	v
no66flag	src/main.c	/^flag  no66flag = NO;		\/* Must also set noextflag to this$/;"	v
no_cd	src/main.c	/^static int no_cd, no_i90;$/;"	v	file:
no_i90	src/main.c	/^static int no_cd, no_i90;$/;"	v	file:
noextflag	src/main.c	/^flag noextflag = NO;$/;"	v
notinf66	src/lex.c	/^	char notinf66;$/;"	m	struct:Keylist	file:
nowarnflag	src/main.c	/^flag nowarnflag = NO;$/;"	v
np_init	src/niceprintf.c	/^np_init(Void)$/;"	f
nregvar	src/init.c	/^int nregvar;$/;"	v
nstars	src/gram.c	/^static int nstars;			\/* Number of labels in an$/;"	v	file:
nsubs	src/equiv.c	/^nsubs(p)$/;"	f
ntempelt	src/defs.h	/^	unsigned ntempelt:10;	\/* for representing temporary arrays, as$/;"	m	struct:Addrblock
nu	src/vax.c	/^ static int nu, *refs, *used;$/;"	v	file:
numread	src/pread.c	/^numread(pf, n)$/;"	f	file:
nv_type	src/names.h	/^#define nv_type(/;"	d
nv_type_help	src/names.c	/^nv_type_help(addrp)$/;"	f
nvars	src/f2c.h	/^	int nvars;$/;"	m	struct:Namelist
nwarn	src/init.c	/^int nwarn;$/;"	v
nxtstno	src/lex.c	/^LOCAL long int nxtstno;	\/* Statement label *\/$/;"	v
oacc	src/f2c.h	/^	char *oacc;$/;"	m	struct:__anon16
oblnk	src/f2c.h	/^	char *oblnk;$/;"	m	struct:__anon16
oerr	src/f2c.h	/^{	flag oerr;$/;"	m	struct:__anon16
ofm	src/f2c.h	/^	char *ofm;$/;"	m	struct:__anon16
ofnm	src/f2c.h	/^	char *ofnm;$/;"	m	struct:__anon16
ofnmlen	src/f2c.h	/^	ftnlen ofnmlen;$/;"	m	struct:__anon16
ohalign	src/main.c	/^char *halign, *ohalign;$/;"	v
olist	src/f2c.h	/^} olist;$/;"	t	typeref:struct:__anon16
olist_names	src/io.c	/^LOCAL char *olist_names[] = {$/;"	v
omit_non_f	src/main.c	/^omit_non_f(Void)$/;"	f	file:
oneof_stg	src/misc.c	/^oneof_stg(name, stg, mask)$/;"	f
onetripflag	src/main.c	/^flag onetripflag = NO;$/;"	v
op_assign	src/misc.c	/^op_assign(opcode)$/;"	f
op_format	src/output.h	/^#define op_format(/;"	d
op_precedence	src/output.h	/^#define op_precedence(/;"	d
opcode	src/defs.h	/^	unsigned int opcode;$/;"	m	struct:Exprblock
opcode_table	src/output.c	/^table_entry opcode_table[] = {$/;"	v
opconv	src/expr.c	/^opconv(p, t)$/;"	f
opconv_fudge	src/output.c	/^opconv_fudge(fp, e)$/;"	f	file:
opeqable	src/output.c	/^static char opeqable[sizeof(opcode_table)\/sizeof(table_entry)];$/;"	v	file:
opf	src/main.c	/^opf(fn, mode)$/;"	f
ops2	src/put.c	/^int ops2 [ ] =$/;"	v
orl	src/f2c.h	/^	ftnint orl;$/;"	m	struct:__anon16
osta	src/f2c.h	/^	char *osta;$/;"	m	struct:__anon16
other_undefs	src/mem.c	/^other_undefs(outfile)$/;"	f
othername	src/intr.c	/^	char othername;		\/* index into callbyvalue table *\/$/;"	m	struct:Specblock	file:
ounit	src/f2c.h	/^	ftnint ounit;$/;"	m	struct:__anon16
out_addr	src/output.c	/^out_addr(fp, addrp)$/;"	f
out_and_free_statement	src/output.c	/^out_and_free_statement(outfile, expr)$/;"	f
out_args	src/output.c	/^out_args(fp, ep)$/;"	f	file:
out_asgoto	src/output.c	/^out_asgoto(outfile, expr)$/;"	f
out_call	src/output.c	/^out_call(outfile, op, ftype, len, name, args)$/;"	f
out_const	src/output.c	/^out_const(fp, cp)$/;"	f
out_else	src/output.c	/^out_else(outfile)$/;"	f
out_end_for	src/output.c	/^out_end_for(outfile)$/;"	f
out_for	src/output.c	/^out_for(outfile, init, test, inc)$/;"	f
out_if	src/output.c	/^out_if(outfile, expr)$/;"	f
out_init	src/output.c	/^out_init(Void)$/;"	f
out_name	src/output.c	/^out_name(fp, namep)$/;"	f
outbtail	src/sysdep.c	/^char *outbuf = "", *outbtail;$/;"	v
outbuf	src/sysdep.c	/^char *outbuf = "", *outbtail;$/;"	v
outbuf_adjust	src/sysdep.c	/^outbuf_adjust(Void)$/;"	f
output_arg_list	src/output.c	/^output_arg_list(fp, listp)$/;"	f	file:
output_binary	src/output.c	/^output_binary(fp, e)$/;"	f	file:
output_buf	src/niceprintf.c	/^static char *output_buf;$/;"	v	file:
output_list	src/output.c	/^output_list(fp, listp)$/;"	f	file:
output_literal	src/output.c	/^output_literal(fp, memno, cp)$/;"	f	file:
output_prim	src/output.c	/^output_prim(fp, primp)$/;"	f	file:
output_rbrace	src/output.c	/^output_rbrace(outfile, s)$/;"	f	file:
output_unary	src/output.c	/^output_unary(fp, e)$/;"	f	file:
overlapping	src/formatdata.c	/^overlapping(Void)$/;"	f	file:
p1_addr	src/p1output.c	/^p1_addr(addrp)$/;"	f	file:
p1_asgoto	src/p1output.c	/^p1_asgoto(addrp)$/;"	f
p1_bakfile	src/sysdep.c	/^char *p1_bakfile	= "p1_file.BAK";$/;"	v
p1_big_addr	src/p1output.c	/^p1_big_addr(addrp)$/;"	f	file:
p1_binary	src/p1output.c	/^p1_binary(e)$/;"	f	file:
p1_comment	src/p1output.c	/^p1_comment(str)$/;"	f
p1_const	src/p1output.c	/^p1_const(cp)$/;"	f	file:
p1_elif	src/p1output.c	/^p1_elif(expr)$/;"	f
p1_else	src/p1output.c	/^p1_else(Void)$/;"	f
p1_endif	src/p1output.c	/^p1_endif(Void)$/;"	f
p1_expr	src/p1output.c	/^p1_expr(expr)$/;"	f
p1_file	src/sysdep.c	/^char *p1_file		= "p1_file";$/;"	v
p1_for	src/p1output.c	/^p1_for(init, test, inc)$/;"	f
p1_goto	src/p1output.c	/^p1_goto(stateno)$/;"	f
p1_head	src/p1output.c	/^p1_head(Class, name)$/;"	f
p1_if	src/p1output.c	/^p1_if(expr)$/;"	f
p1_label	src/p1output.c	/^p1_label(lab)$/;"	f
p1_line_number	src/lex.c	/^p1_line_number(line_number)$/;"	f
p1_list	src/p1output.c	/^p1_list(listp)$/;"	f	file:
p1_literal	src/p1output.c	/^p1_literal(memno)$/;"	f	file:
p1_name	src/p1output.c	/^p1_name(namep)$/;"	f	file:
p1_subr_ret	src/p1output.c	/^p1_subr_ret(retexp)$/;"	f
p1_unary	src/p1output.c	/^p1_unary(e)$/;"	f	file:
p1_where	src/putpcc.c	/^static long p1_where;$/;"	v	file:
p1comp_goto	src/p1output.c	/^p1comp_goto(index, count, labels)$/;"	f
p1else_end	src/p1output.c	/^p1else_end(Void)$/;"	f
p1for_end	src/p1output.c	/^p1for_end(Void)$/;"	f
p1get_const	src/format.c	/^p1get_const(infile, type, resultp)$/;"	f	file:
p1getd	src/format.c	/^p1getd(infile, result)$/;"	f	file:
p1getf	src/format.c	/^p1getf(infile, result)$/;"	f	file:
p1getn	src/format.c	/^p1getn(infile, count, result)$/;"	f	file:
p1getq	src/format.c	/^p1getq(infile, result) FILE *infile; Llong *result;$/;"	f	file:
p1gets	src/format.c	/^p1gets(fp, str, size)$/;"	f	file:
p1put	src/p1output.c	/^p1put(type)$/;"	f
p1putd	src/p1output.c	/^p1putd(type, value)$/;"	f	file:
p1putdd	src/p1output.c	/^p1putdd(type, v1, v2)$/;"	f	file:
p1putddd	src/p1output.c	/^p1putddd(type, v1, v2, v3)$/;"	f	file:
p1putdds	src/p1output.c	/^p1putdds(token, type, stg, str)$/;"	f	file:
p1putds	src/p1output.c	/^p1putds(type, i, str)$/;"	f	file:
p1putn	src/p1output.c	/^p1putn(type, count, str)$/;"	f	file:
p1puts	src/p1output.c	/^p1puts(type, str)$/;"	f
p_entry	src/parse.h	/^#define p_entry(/;"	d
packed	src/intr.c	/^	} packed;$/;"	v	typeref:union:__anon21
pad_common	src/names.c	/^pad_common(c)$/;"	f	file:
paramblock	src/defs.h	/^	struct Paramblock paramblock;$/;"	m	union:Expression	typeref:struct:Expression::Paramblock
paramval	src/defs.h	/^	expptr paramval;$/;"	m	struct:Paramblock
paren_used	src/expr.c	/^paren_used(p) struct Primblock *p;$/;"	f
parens	src/main.c	/^char *file_name, *filename0, *parens;$/;"	v
parenused	src/defs.h	/^	unsigned parenused:1;		\/* distinguish (a) from a *\/$/;"	m	struct:Primblock
parenused	src/defs.h	/^	unsigned parenused:1;	\/* distinguish (a) from a *\/$/;"	m	struct:Addrblock
parlev	src/lex.c	/^LOCAL int parlev;	\/* Parentheses level *\/$/;"	v
parse_args	src/parse_args.c	/^parse_args(argc, argv, table, entries, others, other_count)$/;"	f
parseen	src/lex.c	/^LOCAL int parseen;$/;"	v
parstate	src/init.c	/^int parstate	= OUTSIDE;$/;"	v
pass1_file	src/init.c	/^FILEP pass1_file;$/;"	v
pdp11	src/f2c.h	/^#undef pdp11$/;"	d
pfname	src/sysdep.c	/^static char **spargv, **pfname;$/;"	v	file:
pop_datastack	src/gram.c	/^pop_datastack(Void) {$/;"	f	file:
popctl	src/exec.c	/^popctl(Void)$/;"	f
popinclude	src/lex.c	/^popinclude(Void)$/;"	f
poplab	src/exec.c	/^poplab(Void)$/;"	f
postfix	src/proc.c	/^ static char *postfix[] = { "g", "h", "i",$/;"	v	file:
powint	src/expr.c	/^char *powint[ ] = {$/;"	v
prcona	src/vax.c	/^prcona(fp, a)$/;"	f
prconi	src/vax.c	/^prconi(fp, n)$/;"	f
prconq	src/vax.c	/^prconq(fp, n) FILEP fp; Llong n;$/;"	f
prconr	src/vax.c	/^prconr(fp, x, k)$/;"	f
prec	src/output.h	/^    int prec;			\/* Precedence level, useful for adjusting$/;"	m	struct:__anon22
prefix	src/parse.h	/^    char *prefix;$/;"	m	struct:__anon23
prev_proc	src/proc.c	/^ int prev_proc, proc_argchanges, proc_protochanges;$/;"	v
prev_tab	src/niceprintf.h	/^#define prev_tab(/;"	d
prevlin	src/lex.c	/^LOCAL long prevlin;$/;"	v
primblock	src/defs.h	/^	struct Primblock primblock;$/;"	m	union:Expression	typeref:struct:Expression::Primblock
primchk	src/equiv.c	/^primchk(e) expptr e;$/;"	f
proc_argchanges	src/proc.c	/^ int prev_proc, proc_argchanges, proc_protochanges;$/;"	v
proc_protochanges	src/proc.c	/^ int prev_proc, proc_argchanges, proc_protochanges;$/;"	v
procclass	src/init.c	/^int procclass	= CLUNKNOWN;$/;"	v
process	src/xsum.c	/^process(s, x)$/;"	f
procinit	src/init.c	/^procinit(Void)$/;"	f
procleng	src/init.c	/^ftnint procleng;$/;"	v
procname	src/init.c	/^char *procname;$/;"	v
procode	src/proc.c	/^procode(outfile)$/;"	f
proctype	src/init.c	/^int proctype	= TYUNKNOWN;$/;"	v
progname	src/xsum.c	/^ char *progname;$/;"	v
prolog	src/vax.c	/^prolog(outfile, p)$/;"	f
proto	src/format.c	/^proto(outfile, at, fname)$/;"	f	file:
proto_fname	src/sysdep.c	/^char *proto_fname	= "proto_file";$/;"	v
protofile	src/main.c	/^FILE *protofile;$/;"	v
protorettypes	src/init.c	/^char *protorettypes[] = {$/;"	v
protostatus	src/main.c	/^int chars_per_wd, gflag, protostatus;$/;"	v
protowrite	src/format.c	/^protowrite(protofile, type, name, e, lengths)$/;"	f
prune_left_conv	src/vax.c	/^prune_left_conv(e)$/;"	f
ptr	src/defines.h	/^typedef int *ptr;$/;"	t
punchar	src/lex.c	/^	char punchar;$/;"	m	struct:Punctlist	file:
puncts	src/lex.c	/^static struct Punctlist puncts[ ] =$/;"	v	typeref:struct:Punctlist	file:
punval	src/lex.c	/^	int punval;$/;"	m	struct:Punctlist	file:
pushctl	src/exec.c	/^pushctl(code)$/;"	f
put_one_arg	src/parse_args.c	/^put_one_arg(type, str, store, prefix, string)$/;"	f	file:
put_semi	src/format.c	/^put_semi(outfile)$/;"	f	file:
putaddr	src/putpcc.c	/^putaddr(p0)$/;"	f
putassign	src/put.c	/^putassign(lp, rp)$/;"	f
putcall	src/putpcc.c	/^putcall(p0, temp)$/;"	f
putcat	src/putpcc.c	/^putcat(lhs0, rhs)$/;"	f
putch1	src/putpcc.c	/^putch1(p)$/;"	f
putchcmp	src/putpcc.c	/^putchcmp(p)$/;"	f
putcheq	src/putpcc.c	/^putcheq(p)$/;"	f
putchop	src/putpcc.c	/^putchop(p)$/;"	f
putcmgo	src/putpcc.c	/^putcmgo(index, nlab, labs)$/;"	f
putconst	src/put.c	/^putconst(p)$/;"	f
putct1	src/putpcc.c	/^putct1(q, length_var, string_var, ip)$/;"	f
putcx1	src/putpcc.c	/^putcx1(p)$/;"	f
putcxcmp	src/putpcc.c	/^putcxcmp(p)$/;"	f
putcxeq	src/putpcc.c	/^putcxeq(p)$/;"	f
putcxop	src/putpcc.c	/^putcxop(p)$/;"	f
putentries	src/proc.c	/^putentries(outfile)$/;"	f	file:
puteq	src/put.c	/^puteq(lp, rp)$/;"	f
putexpr	src/put.c	/^putexpr(p)$/;"	f
puthead	src/putpcc.c	/^puthead(s, Class)$/;"	f
putif	src/putpcc.c	/^putif(p, else_if_p)$/;"	f
putio	src/io.c	/^putio(nelt, addr)$/;"	f
putiocall	src/io.c	/^putiocall(q)$/;"	f
putlineno	src/lex.c	/^putlineno(Void)$/;"	f	file:
putmnmx	src/putpcc.c	/^putmnmx(p)$/;"	f
putop	src/putpcc.c	/^putop(p)$/;"	f
putout	src/putpcc.c	/^putout(p)$/;"	f
putpower	src/putpcc.c	/^putpower(p)$/;"	f
putsteq	src/put.c	/^putsteq(a, b)$/;"	f
putwhile	src/putpcc.c	/^putwhile(p)$/;"	f
putx	src/putpcc.c	/^putx(p)$/;"	f
qbit_clear	src/f2c.h	/^#define qbit_clear(/;"	d
qbit_set	src/f2c.h	/^#define qbit_set(/;"	d
r	src/f2c.h	/^	real r;$/;"	m	union:Multitype
r	src/f2c.h	/^typedef struct { doublereal r, i; } doublecomplex;$/;"	m	struct:__anon13
r	src/f2c.h	/^typedef struct { real r, i; } complex;$/;"	m	struct:__anon12
r8fix	src/intr.c	/^r8fix(Void)	\/* adjust tables for -r8 *\/$/;"	f
r8flag	src/main.c	/^flag r8flag = NO;$/;"	v
rdlong	src/formatdata.c	/^rdlong(infile, n)$/;"	f
rdname	src/formatdata.c	/^rdname(infile, vargroupp, name)$/;"	f
read_Pfiles	src/pread.c	/^read_Pfiles(ffiles)$/;"	f
readref	src/pread.c	/^readref(pf, e, ftype)$/;"	f	file:
real	src/f2c.h	/^typedef float real;$/;"	t
realloc	src/malloc.c	/^realloc(f, size)$/;"	f
realpart	src/put.c	/^realpart(p)$/;"	f
ref_defs	src/format.c	/^ref_defs(outfile, refdefs)$/;"	f	file:
refs	src/vax.c	/^ static int nu, *refs, *used;$/;"	v	file:
regnamep	src/init.c	/^Namep regnamep[MAXREGVAR];$/;"	v
regnum	src/vax.c	/^int regnum[] =  {$/;"	v
replaced	src/expr.c	/^static int replaced;$/;"	v	file:
result_ptr	src/parse.h	/^    int *result_ptr;$/;"	m	struct:__anon23
result_type	src/parse.h	/^    int result_type;$/;"	m	struct:__anon23
retcode	src/main.c	/^ int retcode = 0;$/;"	v
retslot	src/init.c	/^Addrp retslot;			\/* Holds automatic variable which was$/;"	v
retval	src/proc.c	/^retval(t)$/;"	f
revchain	src/misc.c	/^revchain(next)$/;"	f
rightp	src/defs.h	/^	expptr rightp;$/;"	m	struct:Exprblock
rmtdir	src/sysdep.c	/^rmtdir(Void)$/;"	f	file:
roundup	src/proc.c	/^#define roundup(/;"	d	file:
roundup	src/proc.c	/^#undef roundup$/;"	d	file:
rpllist	src/init.c	/^struct Rplblock *rpllist	= NULL;$/;"	v	typeref:struct:Rplblock
rplnextp	src/defs.h	/^	struct Rplblock *rplnextp;$/;"	m	struct:Rplblock	typeref:struct:Rplblock::Rplblock
rplnp	src/defs.h	/^	Namep rplnp;		\/* Name of the formal parameter *\/$/;"	m	struct:Rplblock
rpltag	src/defs.h	/^	int rpltag;		\/* Tag on the value of the actual param *\/$/;"	m	struct:Rplblock
rplvp	src/defs.h	/^	expptr rplvp;		\/* Value of the actual parameter *\/$/;"	m	struct:Rplblock
rplxp	src/defs.h	/^	expptr rplxp;		\/* Initialization of temporary variable,$/;"	m	struct:Rplblock
rtvlabel	src/init.c	/^int rtvlabel[NTYPES0];$/;"	v
rtype	src/intr.c	/^	char rtype;		\/* Result type *\/$/;"	m	struct:Specblock	file:
same_expr	src/output.c	/^same_expr(e1, e2)$/;"	f
same_ident	src/output.c	/^same_ident(left, right)$/;"	f
sameconst	src/output.c	/^sameconst(c1, c2)$/;"	f	file:
samefpconst	src/output.c	/^samefpconst(c1, c2, n)$/;"	f	file:
save_argtypes	src/putpcc.c	/^save_argtypes(arglist, at0, at1, ccall, fname, stg, nchargs, type, zap)$/;"	f
saveall	src/init.c	/^flag saveall;$/;"	v
saveargtypes	src/putpcc.c	/^saveargtypes(p)$/;"	f
sbuf	src/lex.c	/^LOCAL char *sbuf;	\/* Main buffer for Fortran source input. *\/$/;"	v
scrub	src/sysdep.h	/^#define scrub(/;"	d
send	src/lex.c	/^LOCAL char *send;	\/* Was = sbuf+20*66 with sbuf[1390]. *\/$/;"	v
set_externs	src/main.c	/^set_externs(Void)$/;"	f
set_tmp_names	src/sysdep.c	/^set_tmp_names(Void)$/;"	f
setbound	src/proc.c	/^setbound(v, nd, dims)$/;"	f
setdata	src/data.c	/^setdata(varp, valp, elen)$/;"	f
setext	src/proc.c	/^setext(v)$/;"	f
setfmt	src/io.c	/^setfmt(lp)$/;"	f
setimpl	src/init.c	/^setimpl(type, length, c1, c2)$/;"	f
setintr	src/proc.c	/^setintr(v)$/;"	f
settype	src/proc.c	/^settype(v, type, length)$/;"	f
sgi	src/f2c.h	/^#undef sgi$/;"	d
sharp_line	src/niceprintf.c	/^int sharp_line = 0;$/;"	v
shend	src/lex.c	/^LOCAL char *shend;	\/* reflects elbow room for #line lines *\/$/;"	v
shiftcase	src/main.c	/^flag shiftcase = YES;$/;"	v
shortint	src/f2c.h	/^typedef short int shortint;$/;"	t
shortlogical	src/f2c.h	/^typedef short int shortlogical;$/;"	t
show_help	src/main.c	/^show_help(progname) char *progname;$/;"	f	file:
show_version	src/main.c	/^show_version(Void)$/;"	f	file:
showver	src/main.c	/^static int help, showver, skipC, skipversion;$/;"	v	file:
sig1catch	src/sysdep.c	/^sig1catch(sig)$/;"	f	file:
sigcatch	src/sysdep.c	/^sigcatch(sig)$/;"	f
size_t	src/sysdep.h	/^typedef unsigned int size_t;$/;"	t
skipC	src/main.c	/^static int help, showver, skipC, skipversion;$/;"	v	file:
skip_offset	src/defs.h	/^	unsigned skip_offset:1;	\/* used in complex arithmetic under -s *\/$/;"	m	struct:Addrblock
skiplab	src/io.c	/^LOCAL long skiplab;$/;"	v
skiplabel	src/io.c	/^LOCAL struct Labelblock *skiplabel;$/;"	v	typeref:struct:Labelblock
skipversion	src/main.c	/^static int help, showver, skipC, skipversion;$/;"	v	file:
sortfname	src/sysdep.c	/^char *sortfname		= "init_file";$/;"	v
sparc	src/f2c.h	/^#undef sparc$/;"	d
spargv	src/sysdep.c	/^static char **spargv, **pfname;$/;"	v	file:
spectab	src/intr.c	/^	} spectab[ ] =$/;"	v	typeref:struct:Specblock
spxname	src/intr.c	/^	char spxname[8];	\/* Name of the function in Fortran *\/$/;"	m	struct:Specblock	file:
sserr	src/expr.c	/^sserr(np) Namep np;$/;"	f
start_formatting	src/format.c	/^start_formatting(Void)$/;"	f
startioctl	src/io.c	/^startioctl()$/;"	f
startproc	src/proc.c	/^startproc(progname, Class)$/;"	f
startrw	src/io.c	/^startrw(Void)$/;"	f
stateno	src/defs.h	/^	ftnint stateno;		\/* Original label *\/$/;"	m	struct:Labelblock
statstruct	src/io.c	/^LOCAL int statstruct = NO;$/;"	v
stb0	src/lex.c	/^LOCAL char *infname1, *infname2, *laststb, *stb0;$/;"	v
stbuf	src/lex.c	/^LOCAL char *stbuf[3];$/;"	v
stfcall	src/expr.c	/^stfcall(np, actlist)$/;"	f	file:
stkey	src/lex.c	/^LOCAL int stkey;	\/* Type of the current statement (DO, END, IF, etc) *\/$/;"	v
stno	src/lex.c	/^LOCAL long int stno;$/;"	v
store_comment	src/lex.c	/^store_comment(str)$/;"	f	file:
str0fmt	src/sysdep.c	/^static char *str0fmt[127] = { \/*}*\/$/;"	v	file:
str_fmt	src/sysdep.c	/^char *str_fmt[Table_size];$/;"	v
string	src/parse.h	/^    char *string;$/;"	m	struct:__anon23
string_num	src/mem.c	/^string_num(pfx, n)$/;"	f
string_start	src/niceprintf.c	/^static char *string_start;$/;"	v	file:
struct_eq	src/misc.c	/^struct_eq(s1, s2)$/;"	f
subcheck	src/expr.c	/^subcheck(np, p)$/;"	f
suboffset	src/expr.c	/^suboffset(p)$/;"	f
subskept	src/expr.c	/^subskept(p, a)$/;"	f	file:
substars	src/init.c	/^flag substars;$/;"	v
substrerr	src/expr.c	/^substrerr(np) Namep np;$/;"	f	file:
sum32	src/xsum.c	/^sum32(sum, x, n)$/;"	f
sun	src/f2c.h	/^#undef sun$/;"	d
sun2	src/f2c.h	/^#undef sun2$/;"	d
sun3	src/f2c.h	/^#undef sun3$/;"	d
sun4	src/f2c.h	/^#undef sun4$/;"	d
szleng	src/main.c	/^int szleng = SZLENG;$/;"	v
tab_size	src/init.c	/^int tab_size = 4;$/;"	v
table	src/main.c	/^static arg_info table[] = {$/;"	v	file:
table_entry	src/output.h	/^} table_entry;$/;"	t	typeref:struct:__anon22
table_size	src/parse.h	/^    int table_size;$/;"	m	struct:__anon23
tag	src/defs.h	/^	field tag;$/;"	m	struct:Addrblock
tag	src/defs.h	/^	field tag;$/;"	m	struct:Constblock
tag	src/defs.h	/^	field tag;$/;"	m	struct:Errorblock
tag	src/defs.h	/^	field tag;$/;"	m	struct:Exprblock
tag	src/defs.h	/^	field tag;$/;"	m	struct:Headblock
tag	src/defs.h	/^	field tag;$/;"	m	struct:Impldoblock
tag	src/defs.h	/^	field tag;$/;"	m	struct:Listblock
tag	src/defs.h	/^	field tag;$/;"	m	struct:Nameblock
tag	src/defs.h	/^	field tag;$/;"	m	struct:Paramblock
tag	src/defs.h	/^	field tag;$/;"	m	struct:Primblock
tag	src/defs.h	/^	field tag;$/;"	m	union:Expression
tagptr	src/defs.h	/^typedef union Expression *expptr, *tagptr;$/;"	t	typeref:union:
tagval	src/gram.c	/^	tagptr tagval;$/;"	m	union:__anon20	file:
temp_name	src/names.c	/^temp_name(starter, num, storage)$/;"	f
templist	src/init.c	/^chainp templist[TYVOID];$/;"	v
textread	src/sysdep.c	/^char binread[] = "rb", textread[] = "r";$/;"	v
textwrite	src/sysdep.c	/^char binwrite[] = "wb", textwrite[] = "w";$/;"	v
tfirst	src/pread.c	/^ static int *tfirst, *tlast, *tnext, tmax;$/;"	v	file:
this_proc_name	src/format.c	/^static char this_proc_name[52];	\/* Name of the current procedure.  This is$/;"	v	file:
this_program	src/parse_args.c	/^static char *this_program = "";$/;"	v	file:
thislabel	src/init.c	/^struct Labelblock *thislabel	= NULL;$/;"	v	typeref:struct:Labelblock
thislin	src/lex.c	/^LOCAL long thislin;$/;"	v
thisstno	src/exec.c	/^long laststfcn = -1, thisstno;$/;"	v
thiswasbranch	src/gram.c	/^static int thiswasbranch = NO;$/;"	v	file:
tlast	src/pread.c	/^ static int *tfirst, *tlast, *tnext, tmax;$/;"	v	file:
tmax	src/pread.c	/^ static int *tfirst, *tlast, *tnext, tmax;$/;"	v	file:
tmpdir	src/sysdep.c	/^char *tmpdir = "";$/;"	v
tnext	src/pread.c	/^ static int *tfirst, *tlast, *tnext, tmax;$/;"	v	file:
to_upper	src/format.c	/^to_upper(s)$/;"	f	file:
token	src/init.c	/^char *token;$/;"	v
toklen	src/init.c	/^int maxtoklen, toklen;$/;"	v
toomanyinit	src/init.c	/^flag toomanyinit;$/;"	v
tostring	src/mem.c	/^tostring(s, n)$/;"	f
tr_tab	src/output.c	/^char tr_tab[Table_size];$/;"	v
trapuv	src/main.c	/^int trapuv;$/;"	v
trealloc	src/pread.c	/^trealloc(Void)$/;"	f	file:
trimunder	src/pread.c	/^trimunder(Void)$/;"	f	file:
tycomplex	src/main.c	/^int tycomplex = TYCOMPLEX;$/;"	v
tyint	src/init.c	/^int tyint	= TYLONG ;$/;"	v
tyioint	src/main.c	/^int tyioint = TYLONG;$/;"	v
tylog	src/init.c	/^int tylog	= TYLOGICAL;$/;"	v
tylogical	src/init.c	/^int tylogical	= TYLONG;$/;"	v
type	src/defs.h	/^	int type;$/;"	m	struct:__anon1
type	src/f2c.h	/^	int  type;$/;"	m	struct:Vardesc
type	src/iob.h	/^	char *type;$/;"	m	struct:iob_data
type	src/iob.h	/^	int nelt, type;$/;"	m	struct:io_setup
type	src/output.h	/^    int type;			\/* UNARY_OP or BINARY_OP *\/$/;"	m	struct:__anon22
type_choice	src/init.c	/^int type_choice[4] = { TYDREAL, TYSHORT, TYLONG,  TYSHORT };$/;"	v
type_fixup	src/putpcc.c	/^type_fixup(at, a, k)$/;"	f
type_pref	src/init.c	/^int type_pref[NTYPES] = { 0, 0, 3, 5, 7,$/;"	v
typealign	src/init.c	/^int typealign[NTYPES] = {$/;"	v
typeconv	src/io.c	/^ int typeconv[TYERROR+1] = {$/;"	v
typedefs	src/main.c	/^static int typedefs = 0;$/;"	v	file:
typefixed	src/defs.h	/^	int typefixed;$/;"	m	struct:Exprblock
typekludge	src/putpcc.c	/^typekludge(ccall, q, at, j)$/;"	f
typelabel	src/defs.h	/^	int typelabel;			\/* Label for function exit; this$/;"	m	struct:Entrypoint
typesize	src/init.c	/^int typesize[NTYPES] = {$/;"	v
tyreal	src/main.c	/^int tyreal = TYREAL;$/;"	v
u370	src/f2c.h	/^#undef u370$/;"	d
u3b	src/f2c.h	/^#undef u3b$/;"	d
u3b2	src/f2c.h	/^#undef u3b2$/;"	d
u3b5	src/f2c.h	/^#undef u3b5$/;"	d
ub	src/defs.h	/^struct Dims { expptr lb, ub; };$/;"	m	struct:Dims
ucq	src/defs.h	/^	ULlong ucq;$/;"	m	union:Constant
uinteger	src/f2c.h	/^typedef unsigned long int uinteger;$/;"	t
ulongint	src/f2c.h	/^typedef unsigned long long ulongint;	\/* system-dependent *\/$/;"	t
uname_tag	src/defs.h	/^	int uname_tag;		\/* Tag describing which of the unions()$/;"	m	struct:Addrblock
unamstring	src/proc.c	/^unamstring(q, s)$/;"	f
unclassifiable	src/lex.c	/^unclassifiable(Void)$/;"	f
undeftype	src/main.c	/^flag undeftype = NO;$/;"	v
unix	src/f2c.h	/^#undef unix$/;"	d
usage	src/xsum.c	/^usage(rc)$/;"	f
use_bs	src/main.c	/^flag use_bs = YES;$/;"	v
use_tyquad	src/main.c	/^flag use_tyquad = YES;$/;"	v
useauto	src/main.c	/^int extcomm, ext1comm, useauto;$/;"	v
used	src/vax.c	/^ static int nu, *refs, *used;$/;"	v	file:
used_builtins	src/init.c	/^chainp used_builtins = CHNULL;	\/* List of builtins used by this function.$/;"	v
used_here	src/defs.h	/^	unsigned used_here:1;	\/* Boolean - true on the second pass$/;"	m	struct:Extsym
used_rets	src/main.c	/^char used_rets[TYSUBR+1];$/;"	v
usedcasts	src/init.c	/^char *usedcasts[TYSUBR+1];$/;"	v
usedefsforcommon	src/main.c	/^int usedefsforcommon = NO;	\/* Use #defines for common reference *\/$/;"	v
uselongints	src/main.c	/^static int uselongints = NO;	\/* YES => tyint = TYLONG *\/$/;"	v	file:
user	src/defs.h	/^	} user;$/;"	m	struct:Addrblock	typeref:union:Addrblock::__anon6
user_label	src/names.c	/^user_label(stateno)$/;"	f
useshortints	src/main.c	/^static int useshortints = NO;	\/* YES => tyint = TYSHORT *\/$/;"	v	file:
vadjdim	src/defs.h	/^	unsigned vadjdim:1;	\/* "adjustable dimension?" - needed for$/;"	m	struct:Nameblock
vardcl	src/expr.c	/^vardcl(v)$/;"	f
vardesc	src/defs.h	/^		} vardesc;$/;"	m	struct:Nameblock	typeref:union:Nameblock::__anon3
varleng	src/defs.h	/^	ftnint varleng;		\/* holds a copy of a constant length which$/;"	m	struct:Addrblock
varleng	src/gram.c	/^static ftnint varleng;$/;"	v	file:
varno	src/defs.h	/^		int varno;		\/* Return variable for a function.$/;"	m	union:Nameblock::__anon3
varnp	src/defs.h	/^	Namep varnp;$/;"	m	struct:Impldoblock
varp	src/defs.h	/^	Namep varp;$/;"	m	struct:Hashentry
vars	src/f2c.h	/^	Vardesc **vars;$/;"	m	struct:Namelist
vartype	src/gram.c	/^static int vartype;$/;"	v	file:
varvp	src/defs.h	/^	Constp varvp;$/;"	m	struct:Impldoblock
varxptr	src/defs.h	/^		} varxptr;$/;"	m	struct:Nameblock	typeref:union:Nameblock::__anon4
vax	src/f2c.h	/^#undef vax$/;"	d
vcalled	src/defs.h	/^	unsigned vcalled:1;	\/* has been invoked *\/$/;"	m	struct:Nameblock
vclass	src/defs.h	/^	field vclass;$/;"	m	struct:Addrblock
vclass	src/defs.h	/^	field vclass;$/;"	m	struct:Constblock
vclass	src/defs.h	/^	field vclass;$/;"	m	struct:Exprblock
vclass	src/defs.h	/^	field vclass;$/;"	m	struct:Headblock
vclass	src/defs.h	/^	field vclass;$/;"	m	struct:Nameblock
vclass	src/defs.h	/^	field vclass;$/;"	m	struct:Paramblock
vcommequiv	src/defs.h	/^	unsigned vcommequiv:1;	\/* True if EQUIVALENCEd onto STGCOMMON *\/$/;"	m	struct:Nameblock
vdcldone	src/defs.h	/^	unsigned vdcldone:1;	\/* "do I think I'm done?" - set when the$/;"	m	struct:Nameblock
vdim	src/defs.h	/^	struct Dimblock *vdim;	\/* points to the dimensions if they exist *\/$/;"	m	struct:Nameblock	typeref:struct:Nameblock::Dimblock
vdimfinish	src/defs.h	/^	unsigned vdimfinish:1;	\/* need to invoke dim_finish() *\/$/;"	m	struct:Nameblock
vdovar	src/defs.h	/^	unsigned vdovar:1;	\/* "is it a DO variable?" for register$/;"	m	struct:Nameblock
veqvadjust	src/defs.h	/^	unsigned veqvadjust:1;	\/* voffset has been adjusted for equivalence *\/$/;"	m	struct:Nameblock
vfmt_asg	src/defs.h	/^	unsigned vfmt_asg:1;	\/* True if char *var_fmt needed *\/$/;"	m	struct:Nameblock
vimpldovar	src/defs.h	/^	unsigned vimpldovar:1;	\/* used to prevent erroneous error messages$/;"	m	struct:Nameblock
vimplstg	src/defs.h	/^	unsigned vimplstg:1;	\/* True if storage type is assigned implicitly;$/;"	m	struct:Nameblock
vimpltype	src/defs.h	/^	unsigned vimpltype:1;	\/* True if implicitly typed and not$/;"	m	struct:Nameblock
vinfproc	src/defs.h	/^	unsigned vinfproc:1;	\/* True if -it infers this to be a procedure *\/$/;"	m	struct:Nameblock
vinftype	src/defs.h	/^	unsigned vinftype:1;	\/* so we can restore implicit type to a$/;"	m	struct:Nameblock
vis_assigned	src/defs.h	/^	unsigned vis_assigned:1;\/* True if this variable has had some$/;"	m	struct:Nameblock
visused	src/defs.h	/^	unsigned visused:1;	\/* True if variable is referenced -- so we *\/$/;"	m	struct:Nameblock
vknownarg	src/defs.h	/^	unsigned vknownarg:1;	\/* True if seen in a previous entry point *\/$/;"	m	struct:Nameblock
vlastdim	src/defs.h	/^	chainp vlastdim;	\/* datap points to new_vars entry for the *\/$/;"	m	struct:Nameblock
vleng	src/defs.h	/^	expptr vleng;		\/* Expression for length of char string -$/;"	m	struct:Headblock
vleng	src/defs.h	/^	expptr vleng;		\/* in the case of a character expression, this$/;"	m	struct:Exprblock
vleng	src/defs.h	/^	expptr vleng;		\/* length of character string, if applicable *\/$/;"	m	struct:Nameblock
vleng	src/defs.h	/^	expptr vleng;$/;"	m	struct:Addrblock
vleng	src/defs.h	/^	expptr vleng;$/;"	m	struct:Constblock
vleng	src/defs.h	/^	expptr vleng;$/;"	m	struct:Paramblock
vnamelist	src/defs.h	/^	unsigned vnamelist:1;	\/* Appears in a NAMELIST *\/$/;"	m	struct:Nameblock
voffset	src/defs.h	/^	ftnint voffset;		\/* offset in a storage block (the variable$/;"	m	struct:Nameblock
vpassed	src/defs.h	/^	unsigned vpassed:1;	\/* True if passed as a character-variable arg *\/$/;"	m	struct:Nameblock
vprocclass	src/defs.h	/^	unsigned vprocclass:3;	\/* P____ macros - selects the   varxptr$/;"	m	struct:Nameblock
vrefused	src/defs.h	/^	unsigned vrefused:1;	\/* Need to #define name_ref (for -s) *\/$/;"	m	struct:Nameblock
vsave	src/defs.h	/^	unsigned vsave:1;$/;"	m	struct:Nameblock
vstfdesc	src/defs.h	/^		chainp vstfdesc;	\/* points to (formals, expr) pair *\/$/;"	m	union:Nameblock::__anon4
vstg	src/defs.h	/^	field vstg;		\/* vstg = 1 when using Const.cds *\/$/;"	m	struct:Constblock
vstg	src/defs.h	/^	field vstg;$/;"	m	struct:Addrblock
vstg	src/defs.h	/^	field vstg;$/;"	m	struct:Exprblock
vstg	src/defs.h	/^	field vstg;$/;"	m	struct:Headblock
vstg	src/defs.h	/^	field vstg;$/;"	m	struct:Nameblock
vstg	src/defs.h	/^	field vstg;$/;"	m	struct:Paramblock
vstg1	src/defs.h	/^		field vstg1;$/;"	m	struct:Addrblock::__anon6::__anon7
vsubscrused	src/defs.h	/^	unsigned vsubscrused:1;	\/* Need to #define name_subscr (for -2) *\/$/;"	m	struct:Nameblock
vtype	src/defs.h	/^	field vtype;$/;"	m	struct:Addrblock
vtype	src/defs.h	/^	field vtype;$/;"	m	struct:Constblock
vtype	src/defs.h	/^	field vtype;$/;"	m	struct:Errorblock
vtype	src/defs.h	/^	field vtype;$/;"	m	struct:Exprblock
vtype	src/defs.h	/^	field vtype;$/;"	m	struct:Headblock
vtype	src/defs.h	/^	field vtype;$/;"	m	struct:Listblock
vtype	src/defs.h	/^	field vtype;$/;"	m	struct:Nameblock
vtype	src/defs.h	/^	field vtype;$/;"	m	struct:Paramblock
vtype	src/defs.h	/^	field vtype;$/;"	m	struct:Primblock
vtypewarned	src/defs.h	/^	unsigned vtypewarned:1;	\/* so we complain just once about$/;"	m	struct:Nameblock
wanted	src/pread.c	/^wanted(i, what)$/;"	f	file:
warn	src/error.c	/^warn(s)$/;"	f
warn1	src/error.c	/^warn1(s, t)$/;"	f
warn72	src/main.c	/^int warn72 = NO;$/;"	v
warni	src/error.c	/^warni(s, t)$/;"	f
westart	src/putpcc.c	/^westart(elseif) int elseif;$/;"	f
wh_first	src/init.c	/^char *wh_first, *wh_next, *wh_last;$/;"	v
wh_last	src/init.c	/^char *wh_first, *wh_next, *wh_last;$/;"	v
wh_next	src/init.c	/^char *wh_first, *wh_next, *wh_last;$/;"	v
word_start	src/niceprintf.c	/^static char *word_start = NULL;$/;"	v	file:
wordalign	src/main.c	/^int wordalign = NO;$/;"	v
wr_abbrevs	src/proc.c	/^wr_abbrevs(outfile, function_head, vars)$/;"	f
wr_ardecls	src/format.c	/^wr_ardecls(outfile, dimp, size)$/;"	f
wr_array_init	src/formatdata.c	/^wr_array_init(outfile, type, values)$/;"	f
wr_char_len	src/formatdata.c	/^wr_char_len(outfile, dimp, n, extra1)$/;"	f
wr_common_decls	src/names.c	/^wr_common_decls(outfile)$/;"	f
wr_equiv_init	src/formatdata.c	/^wr_equiv_init(outfile, memno, Values, iscomm)$/;"	f
wr_globals	src/names.c	/^wr_globals(outfile)$/;"	f
wr_nv_ident_help	src/names.c	/^wr_nv_ident_help(outfile, addrp)$/;"	f
wr_one_init	src/formatdata.c	/^wr_one_init(outfile, varname, Values, keepit)$/;"	f
wr_output_values	src/formatdata.c	/^wr_output_values(outfile, namep, values)$/;"	f
wr_struct	src/names.c	/^wr_struct(outfile, var_list)$/;"	f
write_assigned_fmts	src/format.c	/^write_assigned_fmts(outfile)$/;"	f	file:
write_char_init	src/formatdata.c	/^write_char_init(outfile, Values, namep)$/;"	f	file:
write_comment	src/vax.c	/^write_comment(Void)$/;"	f	file:
write_formats	src/format.c	/^write_formats(outfile)$/;"	f	file:
write_indent	src/niceprintf.c	/^write_indent(fp, use_indent, extra_indent, start, end)$/;"	f	file:
write_ioblocks	src/format.c	/^write_ioblocks(outfile)$/;"	f	file:
write_namelists	src/format.c	/^write_namelists(nmch, outfile)$/;"	f	file:
write_nv_ident	src/names.h	/^#define write_nv_ident(/;"	d
write_typedefs	src/main.c	/^write_typedefs(outfile)$/;"	f	file:
wronginf	src/expr.c	/^wronginf(np)$/;"	f
wrote_comment	src/vax.c	/^ static int wrote_comment;$/;"	v	file:
xretslot	src/init.c	/^Addrp xretslot[NTYPES0];	\/* for multiple entry points *\/$/;"	v
xxxvers	src/version.c	/^char xxxvers[] = "\\n@(#) FORTRAN 77 to C Translator, VERSION 20160102\\n";$/;"	v
yyact	src/gram.c	/^short	yyact[] =$/;"	v
yychk	src/gram.c	/^short	yychk[] =$/;"	v
yyclearin	src/gram.c	/^#define	yyclearin	/;"	d	file:
yydebug	src/gram.c	/^#define	yydebug	/;"	d	file:
yydef	src/gram.c	/^short	yydef[] =$/;"	v
yyerrflag	src/gram.c	/^int	yyerrflag = 0;		\/* error recovery flag *\/$/;"	v
yyerrok	src/gram.c	/^#define	yyerrok	/;"	d	file:
yyerror	src/error.c	/^yyerror(s)$/;"	f
yyexca	src/gram.c	/^short	yyexca[] =$/;"	v
yylex	src/lex.c	/^yylex(Void)$/;"	f
yylex1	src/gram.c	/^yylex1(void)$/;"	f
yylval	src/gram.c	/^YYSTYPE	yylval;$/;"	v
yynerrs	src/gram.c	/^int	yynerrs = 0;		\/* number of errors *\/$/;"	v
yypact	src/gram.c	/^short	yypact[] =$/;"	v
yyparse	src/gram.c	/^yyparse(void)$/;"	f
yypgo	src/gram.c	/^short	yypgo[] =$/;"	v
yyr1	src/gram.c	/^short	yyr1[] =$/;"	v
yyr2	src/gram.c	/^short	yyr2[] =$/;"	v
yystates	src/gram.c	/^char*	yystates[1];		\/* for debugging *\/$/;"	v
yystatname	src/gram.c	/^yystatname(int yys)$/;"	f
yystno	src/lex.c	/^ftnint yystno;$/;"	v
yytok1	src/gram.c	/^short	yytok1[] =$/;"	v
yytok2	src/gram.c	/^short	yytok2[] =$/;"	v
yytok3	src/gram.c	/^long	yytok3[] =$/;"	v
yytokname	src/gram.c	/^yytokname(int yyc)$/;"	f
yytoknames	src/gram.c	/^char*	yytoknames[1];		\/* for debugging *\/$/;"	v
yyval	src/gram.c	/^YYSTYPE	yyval;$/;"	v
z	src/f2c.h	/^	doublecomplex z;$/;"	m	union:Multitype
zap_changes	src/proc.c	/^zap_changes(Void)$/;"	f	file:
zdiv	src/expr.c	/^zdiv(c, a, b)$/;"	f
zeroconst	src/expr.c	/^zeroconst(e)$/;"	f
zflag	src/main.c	/^flag zflag = YES;		\/* recognize double complex intrinsics *\/$/;"	v
zork	src/io.c	/^#define zork(/;"	d	file:
zork	src/io.c	/^#undef zork$/;"	d	file:
